
balance_bot_start.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  00001d70  00001e04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bf  00800228  00800228  00001e2c  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00001ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009fd1  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000197e  00000000  00000000  0000c245  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020b8  00000000  00000000  0000dbc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c5c  00000000  00000000  0000fc7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000222f  00000000  00000000  000108d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c3f  00000000  00000000  00012b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  00016746  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
       2:	00 00       	nop
       4:	b9 c0       	rjmp	.+370    	; 0x178 <__bad_interrupt>
       6:	00 00       	nop
       8:	b7 c0       	rjmp	.+366    	; 0x178 <__bad_interrupt>
       a:	00 00       	nop
       c:	b5 c0       	rjmp	.+362    	; 0x178 <__bad_interrupt>
       e:	00 00       	nop
      10:	b3 c0       	rjmp	.+358    	; 0x178 <__bad_interrupt>
      12:	00 00       	nop
      14:	b1 c0       	rjmp	.+354    	; 0x178 <__bad_interrupt>
      16:	00 00       	nop
      18:	af c0       	rjmp	.+350    	; 0x178 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ad c0       	rjmp	.+346    	; 0x178 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ab c0       	rjmp	.+342    	; 0x178 <__bad_interrupt>
      22:	00 00       	nop
      24:	a9 c0       	rjmp	.+338    	; 0x178 <__bad_interrupt>
      26:	00 00       	nop
      28:	a7 c0       	rjmp	.+334    	; 0x178 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fe c2       	rjmp	.+1532   	; 0x62a <__vector_11>
      2e:	00 00       	nop
      30:	a3 c0       	rjmp	.+326    	; 0x178 <__bad_interrupt>
      32:	00 00       	nop
      34:	a1 c0       	rjmp	.+322    	; 0x178 <__bad_interrupt>
      36:	00 00       	nop
      38:	9f c0       	rjmp	.+318    	; 0x178 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9d c0       	rjmp	.+314    	; 0x178 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9b c0       	rjmp	.+310    	; 0x178 <__bad_interrupt>
      42:	00 00       	nop
      44:	99 c0       	rjmp	.+306    	; 0x178 <__bad_interrupt>
      46:	00 00       	nop
      48:	97 c0       	rjmp	.+302    	; 0x178 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	95 c0       	rjmp	.+298    	; 0x178 <__bad_interrupt>
      4e:	00 00       	nop
      50:	93 c0       	rjmp	.+294    	; 0x178 <__bad_interrupt>
      52:	00 00       	nop
      54:	11 c3       	rjmp	.+1570   	; 0x678 <__vector_21>
      56:	00 00       	nop
      58:	8f c0       	rjmp	.+286    	; 0x178 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8d c0       	rjmp	.+282    	; 0x178 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8b c0       	rjmp	.+278    	; 0x178 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__vector_25>
      68:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__vector_26>
      6c:	85 c0       	rjmp	.+266    	; 0x178 <__bad_interrupt>
      6e:	00 00       	nop
      70:	83 c0       	rjmp	.+262    	; 0x178 <__bad_interrupt>
      72:	00 00       	nop
      74:	81 c0       	rjmp	.+258    	; 0x178 <__bad_interrupt>
      76:	00 00       	nop
      78:	7f c0       	rjmp	.+254    	; 0x178 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7d c0       	rjmp	.+250    	; 0x178 <__bad_interrupt>
      7e:	00 00       	nop
      80:	7b c0       	rjmp	.+246    	; 0x178 <__bad_interrupt>
      82:	00 00       	nop
      84:	79 c0       	rjmp	.+242    	; 0x178 <__bad_interrupt>
      86:	00 00       	nop
      88:	77 c0       	rjmp	.+238    	; 0x178 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	75 c0       	rjmp	.+234    	; 0x178 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__vector_36>
      94:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__vector_37>
      98:	6f c0       	rjmp	.+222    	; 0x178 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6d c0       	rjmp	.+218    	; 0x178 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6b c0       	rjmp	.+214    	; 0x178 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	69 c0       	rjmp	.+210    	; 0x178 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	67 c0       	rjmp	.+206    	; 0x178 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	65 c0       	rjmp	.+202    	; 0x178 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	63 c0       	rjmp	.+198    	; 0x178 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	61 c0       	rjmp	.+194    	; 0x178 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5f c0       	rjmp	.+190    	; 0x178 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5d c0       	rjmp	.+186    	; 0x178 <__bad_interrupt>
      be:	00 00       	nop
      c0:	5b c0       	rjmp	.+182    	; 0x178 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	59 c0       	rjmp	.+178    	; 0x178 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	57 c0       	rjmp	.+174    	; 0x178 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	55 c0       	rjmp	.+170    	; 0x178 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	53 c0       	rjmp	.+166    	; 0x178 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	51 c0       	rjmp	.+162    	; 0x178 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4f c0       	rjmp	.+158    	; 0x178 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4d c0       	rjmp	.+154    	; 0x178 <__bad_interrupt>
      de:	00 00       	nop
      e0:	4b c0       	rjmp	.+150    	; 0x178 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_start>:
     112:	a8 0d       	add	r26, r8
     114:	34 0e       	add	r3, r20

00000116 <__ctors_end>:
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d1 e2       	ldi	r29, 0x21	; 33
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61
     122:	00 e0       	ldi	r16, 0x00	; 0
     124:	0c bf       	out	0x3c, r16	; 60

00000126 <__do_copy_data>:
     126:	12 e0       	ldi	r17, 0x02	; 2
     128:	a0 e0       	ldi	r26, 0x00	; 0
     12a:	b2 e0       	ldi	r27, 0x02	; 2
     12c:	e0 e7       	ldi	r30, 0x70	; 112
     12e:	fd e1       	ldi	r31, 0x1D	; 29
     130:	00 e0       	ldi	r16, 0x00	; 0
     132:	0b bf       	out	0x3b, r16	; 59
     134:	02 c0       	rjmp	.+4      	; 0x13a <__do_copy_data+0x14>
     136:	07 90       	elpm	r0, Z+
     138:	0d 92       	st	X+, r0
     13a:	a8 32       	cpi	r26, 0x28	; 40
     13c:	b1 07       	cpc	r27, r17
     13e:	d9 f7       	brne	.-10     	; 0x136 <__do_copy_data+0x10>

00000140 <__do_clear_bss>:
     140:	23 e0       	ldi	r18, 0x03	; 3
     142:	a8 e2       	ldi	r26, 0x28	; 40
     144:	b2 e0       	ldi	r27, 0x02	; 2
     146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
     148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
     14a:	a7 3e       	cpi	r26, 0xE7	; 231
     14c:	b2 07       	cpc	r27, r18
     14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>

00000150 <__do_global_ctors>:
     150:	10 e0       	ldi	r17, 0x00	; 0
     152:	cb e8       	ldi	r28, 0x8B	; 139
     154:	d0 e0       	ldi	r29, 0x00	; 0
     156:	00 e0       	ldi	r16, 0x00	; 0
     158:	06 c0       	rjmp	.+12     	; 0x166 <__do_global_ctors+0x16>
     15a:	21 97       	sbiw	r28, 0x01	; 1
     15c:	01 09       	sbc	r16, r1
     15e:	80 2f       	mov	r24, r16
     160:	fe 01       	movw	r30, r28
     162:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__tablejump2__>
     166:	c9 38       	cpi	r28, 0x89	; 137
     168:	d1 07       	cpc	r29, r17
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	08 07       	cpc	r16, r24
     16e:	a9 f7       	brne	.-22     	; 0x15a <__do_global_ctors+0xa>
     170:	0e 94 35 09 	call	0x126a	; 0x126a <main>
     174:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <_exit>

00000178 <__bad_interrupt>:
     178:	43 cf       	rjmp	.-378    	; 0x0 <__vectors>

0000017a <_Z13accelero_initv>:
	i2c_getbyte(0x53<<1,0x34,&lower_byte);
	i2c_getbyte(0x53<<1,0x35,&higher_byte);
	//concatenate both and convert into units of g
	acc_y=0.0039*((higher_byte<<8)|(UINT8)lower_byte);
	return acc_y;
}
     17a:	4a e0       	ldi	r20, 0x0A	; 10
     17c:	6c e2       	ldi	r22, 0x2C	; 44
     17e:	86 ea       	ldi	r24, 0xA6	; 166
     180:	cd d0       	rcall	.+410    	; 0x31c <_Z12i2c_sendbytehhh>
     182:	26 e6       	ldi	r18, 0x66	; 102
     184:	86 ee       	ldi	r24, 0xE6	; 230
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	21 50       	subi	r18, 0x01	; 1
     18a:	80 40       	sbci	r24, 0x00	; 0
     18c:	90 40       	sbci	r25, 0x00	; 0
     18e:	e1 f7       	brne	.-8      	; 0x188 <_Z13accelero_initv+0xe>
     190:	48 e0       	ldi	r20, 0x08	; 8
     192:	6d e2       	ldi	r22, 0x2D	; 45
     194:	86 ea       	ldi	r24, 0xA6	; 166
     196:	c2 d0       	rcall	.+388    	; 0x31c <_Z12i2c_sendbytehhh>
     198:	26 e6       	ldi	r18, 0x66	; 102
     19a:	86 ee       	ldi	r24, 0xE6	; 230
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	21 50       	subi	r18, 0x01	; 1
     1a0:	80 40       	sbci	r24, 0x00	; 0
     1a2:	90 40       	sbci	r25, 0x00	; 0
     1a4:	e1 f7       	brne	.-8      	; 0x19e <_Z13accelero_initv+0x24>
     1a6:	40 e0       	ldi	r20, 0x00	; 0
     1a8:	61 e3       	ldi	r22, 0x31	; 49
     1aa:	86 ea       	ldi	r24, 0xA6	; 166
     1ac:	b7 d0       	rcall	.+366    	; 0x31c <_Z12i2c_sendbytehhh>
     1ae:	26 e6       	ldi	r18, 0x66	; 102
     1b0:	86 ee       	ldi	r24, 0xE6	; 230
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	21 50       	subi	r18, 0x01	; 1
     1b6:	80 40       	sbci	r24, 0x00	; 0
     1b8:	90 40       	sbci	r25, 0x00	; 0
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <_Z13accelero_initv+0x3a>
     1bc:	08 95       	ret

000001be <_Z9get_acc_xv>:
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	1f 92       	push	r1
     1c4:	1f 92       	push	r1
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
     1ca:	ae 01       	movw	r20, r28
     1cc:	4f 5f       	subi	r20, 0xFF	; 255
     1ce:	5f 4f       	sbci	r21, 0xFF	; 255
     1d0:	62 e3       	ldi	r22, 0x32	; 50
     1d2:	86 ea       	ldi	r24, 0xA6	; 166
     1d4:	e3 d0       	rcall	.+454    	; 0x39c <_Z11i2c_getbytehhPa>
     1d6:	ae 01       	movw	r20, r28
     1d8:	4e 5f       	subi	r20, 0xFE	; 254
     1da:	5f 4f       	sbci	r21, 0xFF	; 255
     1dc:	63 e3       	ldi	r22, 0x33	; 51
     1de:	86 ea       	ldi	r24, 0xA6	; 166
     1e0:	dd d0       	rcall	.+442    	; 0x39c <_Z11i2c_getbytehhPa>
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	6a 81       	ldd	r22, Y+2	; 0x02
     1e6:	06 2e       	mov	r0, r22
     1e8:	00 0c       	add	r0, r0
     1ea:	77 0b       	sbc	r23, r23
     1ec:	76 2f       	mov	r23, r22
     1ee:	66 27       	eor	r22, r22
     1f0:	68 2b       	or	r22, r24
     1f2:	07 2e       	mov	r0, r23
     1f4:	00 0c       	add	r0, r0
     1f6:	88 0b       	sbc	r24, r24
     1f8:	99 0b       	sbc	r25, r25
     1fa:	0e 94 ef 0a 	call	0x15de	; 0x15de <__floatsisf>
     1fe:	24 e2       	ldi	r18, 0x24	; 36
     200:	37 e9       	ldi	r19, 0x97	; 151
     202:	4f e7       	ldi	r20, 0x7F	; 127
     204:	5b e3       	ldi	r21, 0x3B	; 59
     206:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
     20a:	0f 90       	pop	r0
     20c:	0f 90       	pop	r0
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <_Z9get_acc_zv>:
? * Logic: get lower and higher byte using i2c and concatenate both.
? * Convert to g units by multiplying with resolution.
? * Example Call: get_acc_z()
? */
float get_acc_z()
{
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	1f 92       	push	r1
     21a:	1f 92       	push	r1
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
	INT8 higher_byte,lower_byte;
	float acc_z;
	//fetch lower byte and then higher byte
	i2c_getbyte(0x53<<1,0x36,&lower_byte);
     220:	ae 01       	movw	r20, r28
     222:	4f 5f       	subi	r20, 0xFF	; 255
     224:	5f 4f       	sbci	r21, 0xFF	; 255
     226:	66 e3       	ldi	r22, 0x36	; 54
     228:	86 ea       	ldi	r24, 0xA6	; 166
     22a:	b8 d0       	rcall	.+368    	; 0x39c <_Z11i2c_getbytehhPa>
	i2c_getbyte(0x53<<1,0x37,&higher_byte);
     22c:	ae 01       	movw	r20, r28
     22e:	4e 5f       	subi	r20, 0xFE	; 254
     230:	5f 4f       	sbci	r21, 0xFF	; 255
     232:	67 e3       	ldi	r22, 0x37	; 55
     234:	86 ea       	ldi	r24, 0xA6	; 166
     236:	b2 d0       	rcall	.+356    	; 0x39c <_Z11i2c_getbytehhPa>
	//concatenate both and convert into units of g
	acc_z=0.0039*((higher_byte<<8)|(UINT8)lower_byte);
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	6a 81       	ldd	r22, Y+2	; 0x02
     23c:	06 2e       	mov	r0, r22
     23e:	00 0c       	add	r0, r0
     240:	77 0b       	sbc	r23, r23
     242:	76 2f       	mov	r23, r22
     244:	66 27       	eor	r22, r22
     246:	68 2b       	or	r22, r24
     248:	07 2e       	mov	r0, r23
     24a:	00 0c       	add	r0, r0
     24c:	88 0b       	sbc	r24, r24
     24e:	99 0b       	sbc	r25, r25
     250:	0e 94 ef 0a 	call	0x15de	; 0x15de <__floatsisf>
     254:	24 e2       	ldi	r18, 0x24	; 36
     256:	37 e9       	ldi	r19, 0x97	; 151
     258:	4f e7       	ldi	r20, 0x7F	; 127
     25a:	5b e3       	ldi	r21, 0x3B	; 59
     25c:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
	return acc_z;
}
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <_Z9gyro_initv>:
	i2c_getbyte(0x69<<1,0x28,&lower_byte);
	i2c_getbyte(0x69<<1,0x29,&higher_byte);
	//concatenate both and convert to degree per second
	omega_x=0.00875*((higher_byte<<8)|(UINT8)lower_byte);
	return omega_x;
}
     26a:	4f e0       	ldi	r20, 0x0F	; 15
     26c:	60 e2       	ldi	r22, 0x20	; 32
     26e:	82 ed       	ldi	r24, 0xD2	; 210
     270:	55 d0       	rcall	.+170    	; 0x31c <_Z12i2c_sendbytehhh>
     272:	26 e6       	ldi	r18, 0x66	; 102
     274:	86 ee       	ldi	r24, 0xE6	; 230
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	21 50       	subi	r18, 0x01	; 1
     27a:	80 40       	sbci	r24, 0x00	; 0
     27c:	90 40       	sbci	r25, 0x00	; 0
     27e:	e1 f7       	brne	.-8      	; 0x278 <_Z9gyro_initv+0xe>
     280:	08 95       	ret

00000282 <_Z11get_omega_yv>:
? * Logic: get lower and higher byte using i2c and concatenate both.
? * Convert to degrees per second by multiplying with resolution.
? * Example Call: get_omega_y()
? */
float get_omega_y()
{
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	1f 92       	push	r1
     288:	1f 92       	push	r1
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
	INT8 higher_byte,lower_byte;
	float omega_y;
	//fetch lower byte and then higher byte
	i2c_getbyte(0x69<<1,0x2A,&lower_byte);
     28e:	ae 01       	movw	r20, r28
     290:	4f 5f       	subi	r20, 0xFF	; 255
     292:	5f 4f       	sbci	r21, 0xFF	; 255
     294:	6a e2       	ldi	r22, 0x2A	; 42
     296:	82 ed       	ldi	r24, 0xD2	; 210
     298:	81 d0       	rcall	.+258    	; 0x39c <_Z11i2c_getbytehhPa>
	i2c_getbyte(0x69<<1,0x2B,&higher_byte);
     29a:	ae 01       	movw	r20, r28
     29c:	4e 5f       	subi	r20, 0xFE	; 254
     29e:	5f 4f       	sbci	r21, 0xFF	; 255
     2a0:	6b e2       	ldi	r22, 0x2B	; 43
     2a2:	82 ed       	ldi	r24, 0xD2	; 210
     2a4:	7b d0       	rcall	.+246    	; 0x39c <_Z11i2c_getbytehhPa>
	//concatenate both and convert to degree per second
	omega_y=0.00875*((higher_byte<<8)|(UINT8)lower_byte);
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	6a 81       	ldd	r22, Y+2	; 0x02
     2aa:	06 2e       	mov	r0, r22
     2ac:	00 0c       	add	r0, r0
     2ae:	77 0b       	sbc	r23, r23
     2b0:	76 2f       	mov	r23, r22
     2b2:	66 27       	eor	r22, r22
     2b4:	68 2b       	or	r22, r24
     2b6:	07 2e       	mov	r0, r23
     2b8:	00 0c       	add	r0, r0
     2ba:	88 0b       	sbc	r24, r24
     2bc:	99 0b       	sbc	r25, r25
     2be:	0e 94 ef 0a 	call	0x15de	; 0x15de <__floatsisf>
     2c2:	29 e2       	ldi	r18, 0x29	; 41
     2c4:	3c e5       	ldi	r19, 0x5C	; 92
     2c6:	4f e0       	ldi	r20, 0x0F	; 15
     2c8:	5c e3       	ldi	r21, 0x3C	; 60
     2ca:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
	return omega_y;
}
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <_Z8i2c_initv>:
arguments		:	INT8 *data (points to the byte to which the data needs to be copied)
return value	:	void
*********************************/
void i2c_get(INT8 *data)
{
	*data = TWDR;					//copying data from TWDR register
     2d8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     2dc:	ec eb       	ldi	r30, 0xBC	; 188
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	10 82       	st	Z, r1
     2e2:	84 ec       	ldi	r24, 0xC4	; 196
     2e4:	80 83       	st	Z, r24
     2e6:	8a e0       	ldi	r24, 0x0A	; 10
     2e8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     2ec:	08 95       	ret

000002ee <_Z9i2c_startv>:
     2ee:	ec eb       	ldi	r30, 0xBC	; 188
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	80 81       	ld	r24, Z
     2f4:	80 66       	ori	r24, 0x60	; 96
     2f6:	80 83       	st	Z, r24
     2f8:	08 95       	ret

000002fa <_Z11clear_twintv>:
     2fa:	ec eb       	ldi	r30, 0xBC	; 188
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	80 81       	ld	r24, Z
     300:	80 68       	ori	r24, 0x80	; 128
     302:	80 83       	st	Z, r24
     304:	08 95       	ret

00000306 <_Z4waitv>:
     306:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     30a:	87 ff       	sbrs	r24, 7
     30c:	fc cf       	rjmp	.-8      	; 0x306 <_Z4waitv>
     30e:	08 95       	ret

00000310 <_Z8i2c_stopv>:
     310:	ec eb       	ldi	r30, 0xBC	; 188
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	80 81       	ld	r24, Z
     316:	80 61       	ori	r24, 0x10	; 16
     318:	80 83       	st	Z, r24
     31a:	08 95       	ret

0000031c <_Z12i2c_sendbytehhh>:
					UINT8 int_add (address of the internal register of the slave),
					UINT8 data(byte of data which needs to be sent)
return value	:	enum (value which tells if the transmission was succesfull or not)
********************************/
STAT i2c_sendbyte(UINT8 dev_add, UINT8 int_add,UINT8 data)
{
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	1f 92       	push	r1
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	16 2f       	mov	r17, r22
     32c:	04 2f       	mov	r16, r20
	i2c_start();					//starting transmission
     32e:	89 83       	std	Y+1, r24	; 0x01
     330:	de df       	rcall	.-68     	; 0x2ee <_Z9i2c_startv>
	wait();							//then wait for succesfull transmission
     332:	e9 df       	rcall	.-46     	; 0x306 <_Z4waitv>
return value	:	UINT8 (returns the status)
********************************/
UINT8 i2c_getstatus()
{
	UINT8 status;
	status = TWSR & 0xF8;			//5 bits of TWSR register gives the status
     334:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     338:	98 7f       	andi	r25, 0xF8	; 248
********************************/
STAT i2c_sendbyte(UINT8 dev_add, UINT8 int_add,UINT8 data)
{
	i2c_start();					//starting transmission
	wait();							//then wait for succesfull transmission
	if(i2c_getstatus() != 0x08)		//check status
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	98 30       	cpi	r25, 0x08	; 8
     33e:	29 f5       	brne	.+74     	; 0x38a <_Z12i2c_sendbytehhh+0x6e>
arguments		:	UINT8 data(the byte which is to be written)
return value	:	void
*********************************/
void i2c_write(UINT8 data)
{
	TWDR = data;					//writing data or add to TWDR register
     340:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	wait();							//then wait for succesfull transmission
	if(i2c_getstatus() != 0x08)		//check status
		return START_ERR;

	i2c_write(dev_add | write);		//writing slave + write to TWDR
	TWCR &= ~start;
     344:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     348:	8f 7d       	andi	r24, 0xDF	; 223
     34a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	clear_twint();					//clear TWINT bit starts transmission
     34e:	d5 df       	rcall	.-86     	; 0x2fa <_Z11clear_twintv>
	wait();
     350:	da df       	rcall	.-76     	; 0x306 <_Z4waitv>
return value	:	UINT8 (returns the status)
********************************/
UINT8 i2c_getstatus()
{
	UINT8 status;
	status = TWSR & 0xF8;			//5 bits of TWSR register gives the status
     352:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     356:	88 7f       	andi	r24, 0xF8	; 248

	i2c_write(dev_add | write);		//writing slave + write to TWDR
	TWCR &= ~start;
	clear_twint();					//clear TWINT bit starts transmission
	wait();
	if(i2c_getstatus()!=0x18)
     358:	88 31       	cpi	r24, 0x18	; 24
     35a:	c9 f4       	brne	.+50     	; 0x38e <_Z12i2c_sendbytehhh+0x72>
arguments		:	UINT8 data(the byte which is to be written)
return value	:	void
*********************************/
void i2c_write(UINT8 data)
{
	TWDR = data;					//writing data or add to TWDR register
     35c:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	wait();
	if(i2c_getstatus()!=0x18)
		return SLAVEW_ERR;

	i2c_write(int_add);				//writing int_add to TWDR
	clear_twint();
     360:	cc df       	rcall	.-104    	; 0x2fa <_Z11clear_twintv>
	wait();
     362:	d1 df       	rcall	.-94     	; 0x306 <_Z4waitv>
return value	:	UINT8 (returns the status)
********************************/
UINT8 i2c_getstatus()
{
	UINT8 status;
	status = TWSR & 0xF8;			//5 bits of TWSR register gives the status
     364:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     368:	88 7f       	andi	r24, 0xF8	; 248
		return SLAVEW_ERR;

	i2c_write(int_add);				//writing int_add to TWDR
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x28)
     36a:	88 32       	cpi	r24, 0x28	; 40
     36c:	11 f0       	breq	.+4      	; 0x372 <_Z12i2c_sendbytehhh+0x56>
	{	return WRITE_ERR;	}
     36e:	8c ef       	ldi	r24, 0xFC	; 252
     370:	0f c0       	rjmp	.+30     	; 0x390 <_Z12i2c_sendbytehhh+0x74>
arguments		:	UINT8 data(the byte which is to be written)
return value	:	void
*********************************/
void i2c_write(UINT8 data)
{
	TWDR = data;					//writing data or add to TWDR register
     372:	00 93 bb 00 	sts	0x00BB, r16	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	wait();
	if(i2c_getstatus()!=0x28)
	{	return WRITE_ERR;	}

	i2c_write(data);				//writing one byte of data...to write multi byte | with 0x80
	clear_twint();
     376:	c1 df       	rcall	.-126    	; 0x2fa <_Z11clear_twintv>
	wait();
     378:	c6 df       	rcall	.-116    	; 0x306 <_Z4waitv>
return value	:	UINT8 (returns the status)
********************************/
UINT8 i2c_getstatus()
{
	UINT8 status;
	status = TWSR & 0xF8;			//5 bits of TWSR register gives the status
     37a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     37e:	88 7f       	andi	r24, 0xF8	; 248
	{	return WRITE_ERR;	}

	i2c_write(data);				//writing one byte of data...to write multi byte | with 0x80
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x28)
     380:	88 32       	cpi	r24, 0x28	; 40
     382:	a9 f7       	brne	.-22     	; 0x36e <_Z12i2c_sendbytehhh+0x52>
		return WRITE_ERR;

	i2c_stop();
     384:	c5 df       	rcall	.-118    	; 0x310 <_Z8i2c_stopv>

	return OK;
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	03 c0       	rjmp	.+6      	; 0x390 <_Z12i2c_sendbytehhh+0x74>
STAT i2c_sendbyte(UINT8 dev_add, UINT8 int_add,UINT8 data)
{
	i2c_start();					//starting transmission
	wait();							//then wait for succesfull transmission
	if(i2c_getstatus() != 0x08)		//check status
		return START_ERR;
     38a:	89 ef       	ldi	r24, 0xF9	; 249
     38c:	01 c0       	rjmp	.+2      	; 0x390 <_Z12i2c_sendbytehhh+0x74>
	i2c_write(dev_add | write);		//writing slave + write to TWDR
	TWCR &= ~start;
	clear_twint();					//clear TWINT bit starts transmission
	wait();
	if(i2c_getstatus()!=0x18)
		return SLAVEW_ERR;
     38e:	8a ef       	ldi	r24, 0xFA	; 250
		return WRITE_ERR;

	i2c_stop();

	return OK;
}
     390:	0f 90       	pop	r0
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	08 95       	ret

0000039c <_Z11i2c_getbytehhPa>:
					UINT8 int_add (address of the internal register of the slave),
					INT8 *data(points to the byte to which the data needs to be copied)					
return value	:	enum (value which tells if the transmission was succesfull or not)
********************************/
STAT i2c_getbyte(UINT8 dev_add,UINT8 int_add,INT8 *data)
{
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	c8 2f       	mov	r28, r24
     3a6:	d6 2f       	mov	r29, r22
     3a8:	8a 01       	movw	r16, r20
	i2c_start();					//starting transmission
     3aa:	a1 df       	rcall	.-190    	; 0x2ee <_Z9i2c_startv>
	wait();							//then wait for succesfull transmission
     3ac:	ac df       	rcall	.-168    	; 0x306 <_Z4waitv>
return value	:	UINT8 (returns the status)
********************************/
UINT8 i2c_getstatus()
{
	UINT8 status;
	status = TWSR & 0xF8;			//5 bits of TWSR register gives the status
     3ae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     3b2:	88 7f       	andi	r24, 0xF8	; 248
********************************/
STAT i2c_getbyte(UINT8 dev_add,UINT8 int_add,INT8 *data)
{
	i2c_start();					//starting transmission
	wait();							//then wait for succesfull transmission
	if(i2c_getstatus() != 0x08)		//checking status
     3b4:	88 30       	cpi	r24, 0x08	; 8
     3b6:	09 f0       	breq	.+2      	; 0x3ba <_Z11i2c_getbytehhPa+0x1e>
     3b8:	40 c0       	rjmp	.+128    	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
arguments		:	UINT8 data(the byte which is to be written)
return value	:	void
*********************************/
void i2c_write(UINT8 data)
{
	TWDR = data;					//writing data or add to TWDR register
     3ba:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	wait();							//then wait for succesfull transmission
	if(i2c_getstatus() != 0x08)		//checking status
		return START_ERR;

	i2c_write(dev_add | write);		//writing slave + write to TWDR
	TWCR &= ~start;
     3be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     3c2:	8f 7d       	andi	r24, 0xDF	; 223
     3c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	clear_twint();					//clear TWINT bit and starts transmission
     3c8:	98 df       	rcall	.-208    	; 0x2fa <_Z11clear_twintv>
	wait();
     3ca:	9d df       	rcall	.-198    	; 0x306 <_Z4waitv>
return value	:	UINT8 (returns the status)
********************************/
UINT8 i2c_getstatus()
{
	UINT8 status;
	status = TWSR & 0xF8;			//5 bits of TWSR register gives the status
     3cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     3d0:	88 7f       	andi	r24, 0xF8	; 248

	i2c_write(dev_add | write);		//writing slave + write to TWDR
	TWCR &= ~start;
	clear_twint();					//clear TWINT bit and starts transmission
	wait();
	if(i2c_getstatus()!=0x18)
     3d2:	88 31       	cpi	r24, 0x18	; 24
     3d4:	a1 f5       	brne	.+104    	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
arguments		:	UINT8 data(the byte which is to be written)
return value	:	void
*********************************/
void i2c_write(UINT8 data)
{
	TWDR = data;					//writing data or add to TWDR register
     3d6:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	wait();
	if(i2c_getstatus()!=0x18)
		return SLAVEW_ERR;	

	i2c_write(int_add);				//writing int_add to TWDR
	clear_twint();
     3da:	8f df       	rcall	.-226    	; 0x2fa <_Z11clear_twintv>
	wait();
     3dc:	94 df       	rcall	.-216    	; 0x306 <_Z4waitv>
return value	:	UINT8 (returns the status)
********************************/
UINT8 i2c_getstatus()
{
	UINT8 status;
	status = TWSR & 0xF8;			//5 bits of TWSR register gives the status
     3de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     3e2:	88 7f       	andi	r24, 0xF8	; 248
		return SLAVEW_ERR;	

	i2c_write(int_add);				//writing int_add to TWDR
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x28)
     3e4:	88 32       	cpi	r24, 0x28	; 40
     3e6:	69 f5       	brne	.+90     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
		return WRITE_ERR;

	i2c_start();					//repeated start
     3e8:	82 df       	rcall	.-252    	; 0x2ee <_Z9i2c_startv>
	wait();
     3ea:	8d df       	rcall	.-230    	; 0x306 <_Z4waitv>
return value	:	UINT8 (returns the status)
********************************/
UINT8 i2c_getstatus()
{
	UINT8 status;
	status = TWSR & 0xF8;			//5 bits of TWSR register gives the status
     3ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     3f0:	88 7f       	andi	r24, 0xF8	; 248
	if(i2c_getstatus()!=0x28)
		return WRITE_ERR;

	i2c_start();					//repeated start
	wait();
	if(i2c_getstatus() != 0x10)
     3f2:	80 31       	cpi	r24, 0x10	; 16
     3f4:	41 f5       	brne	.+80     	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
		return REPSTART_ERR;

	i2c_write(dev_add | read1);		//writing slave + read to TWDR register
     3f6:	c1 60       	ori	r28, 0x01	; 1
arguments		:	UINT8 data(the byte which is to be written)
return value	:	void
*********************************/
void i2c_write(UINT8 data)
{
	TWDR = data;					//writing data or add to TWDR register
     3f8:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	wait();
	if(i2c_getstatus() != 0x10)
		return REPSTART_ERR;

	i2c_write(dev_add | read1);		//writing slave + read to TWDR register
	TWCR &= ~start;
     3fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     400:	8f 7d       	andi	r24, 0xDF	; 223
     402:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	clear_twint();
     406:	79 df       	rcall	.-270    	; 0x2fa <_Z11clear_twintv>
	wait();
     408:	7e df       	rcall	.-260    	; 0x306 <_Z4waitv>
return value	:	UINT8 (returns the status)
********************************/
UINT8 i2c_getstatus()
{
	UINT8 status;
	status = TWSR & 0xF8;			//5 bits of TWSR register gives the status
     40a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     40e:	88 7f       	andi	r24, 0xF8	; 248

	i2c_write(dev_add | read1);		//writing slave + read to TWDR register
	TWCR &= ~start;
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x40)
     410:	80 34       	cpi	r24, 0x40	; 64
     412:	d9 f4       	brne	.+54     	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
		return SLAVER_ERR;

	TWCR &= ~eack;
     414:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     418:	8f 7b       	andi	r24, 0xBF	; 191
     41a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	clear_twint();
     41e:	6d df       	rcall	.-294    	; 0x2fa <_Z11clear_twintv>
	wait();
     420:	72 df       	rcall	.-284    	; 0x306 <_Z4waitv>
return value	:	UINT8 (returns the status)
********************************/
UINT8 i2c_getstatus()
{
	UINT8 status;
	status = TWSR & 0xF8;			//5 bits of TWSR register gives the status
     422:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     426:	88 7f       	andi	r24, 0xF8	; 248
		return SLAVER_ERR;

	TWCR &= ~eack;
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x58)
     428:	88 35       	cpi	r24, 0x58	; 88
     42a:	89 f4       	brne	.+34     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
arguments		:	INT8 *data (points to the byte to which the data needs to be copied)
return value	:	void
*********************************/
void i2c_get(INT8 *data)
{
	*data = TWDR;					//copying data from TWDR register
     42c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     430:	f8 01       	movw	r30, r16
     432:	80 83       	st	Z, r24
	if(i2c_getstatus()!=0x58)
		return READ_ERR;

	i2c_get(data);					//getting data to the char pointer

	i2c_stop();						//stopping the transmission
     434:	6d df       	rcall	.-294    	; 0x310 <_Z8i2c_stopv>

	return OK;
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	0b c0       	rjmp	.+22     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
STAT i2c_getbyte(UINT8 dev_add,UINT8 int_add,INT8 *data)
{
	i2c_start();					//starting transmission
	wait();							//then wait for succesfull transmission
	if(i2c_getstatus() != 0x08)		//checking status
		return START_ERR;
     43a:	89 ef       	ldi	r24, 0xF9	; 249
     43c:	09 c0       	rjmp	.+18     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
	i2c_write(dev_add | write);		//writing slave + write to TWDR
	TWCR &= ~start;
	clear_twint();					//clear TWINT bit and starts transmission
	wait();
	if(i2c_getstatus()!=0x18)
		return SLAVEW_ERR;	
     43e:	8a ef       	ldi	r24, 0xFA	; 250
     440:	07 c0       	rjmp	.+14     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>

	i2c_write(int_add);				//writing int_add to TWDR
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x28)
		return WRITE_ERR;
     442:	8c ef       	ldi	r24, 0xFC	; 252
     444:	05 c0       	rjmp	.+10     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>

	i2c_start();					//repeated start
	wait();
	if(i2c_getstatus() != 0x10)
		return REPSTART_ERR;
     446:	8e ef       	ldi	r24, 0xFE	; 254
     448:	03 c0       	rjmp	.+6      	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
	i2c_write(dev_add | read1);		//writing slave + read to TWDR register
	TWCR &= ~start;
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x40)
		return SLAVER_ERR;
     44a:	8b ef       	ldi	r24, 0xFB	; 251
     44c:	01 c0       	rjmp	.+2      	; 0x450 <__FUSE_REGION_LENGTH__+0x50>

	TWCR &= ~eack;
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x58)
		return READ_ERR;
     44e:	8d ef       	ldi	r24, 0xFD	; 253
	i2c_get(data);					//getting data to the char pointer

	i2c_stop();						//stopping the transmission

	return OK;
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	08 95       	ret

0000045a <_Z10uart1_initv>:
? * Example Call: back()
? */
void forward (void) //both wheels backward
{
	PORTH=PORTH|0x42;	//sets PH6 and PH1 to high
	PORTH=PORTH&0x7B;	//sets PH7 and PH2 to low
     45a:	e9 ec       	ldi	r30, 0xC9	; 201
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	10 82       	st	Z, r1
     460:	8f e5       	ldi	r24, 0x5F	; 95
     462:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     466:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     46a:	86 e0       	ldi	r24, 0x06	; 6
     46c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
     470:	88 e1       	ldi	r24, 0x18	; 24
     472:	80 83       	st	Z, r24
     474:	08 95       	ret

00000476 <_Z16motor_pin_configv>:
     476:	e1 e0       	ldi	r30, 0x01	; 1
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	80 81       	ld	r24, Z
     47c:	8e 6d       	ori	r24, 0xDE	; 222
     47e:	80 83       	st	Z, r24
     480:	e2 e0       	ldi	r30, 0x02	; 2
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	80 81       	ld	r24, Z
     486:	81 72       	andi	r24, 0x21	; 33
     488:	80 83       	st	Z, r24
     48a:	e7 e0       	ldi	r30, 0x07	; 7
     48c:	f1 e0       	ldi	r31, 0x01	; 1
     48e:	80 81       	ld	r24, Z
     490:	80 7f       	andi	r24, 0xF0	; 240
     492:	80 83       	st	Z, r24
     494:	e8 e0       	ldi	r30, 0x08	; 8
     496:	f1 e0       	ldi	r31, 0x01	; 1
     498:	80 81       	ld	r24, Z
     49a:	8f 60       	ori	r24, 0x0F	; 15
     49c:	80 83       	st	Z, r24
     49e:	08 95       	ret

000004a0 <_Z14encoder_configv>:
     4a0:	f8 94       	cli
     4a2:	84 e0       	ldi	r24, 0x04	; 4
     4a4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
     4a8:	8f e0       	ldi	r24, 0x0F	; 15
     4aa:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>
     4ae:	e6 e0       	ldi	r30, 0x06	; 6
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	80 81       	ld	r24, Z
     4b4:	83 70       	andi	r24, 0x03	; 3
     4b6:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <state1>
     4ba:	80 81       	ld	r24, Z
     4bc:	8c 70       	andi	r24, 0x0C	; 12
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	95 95       	asr	r25
     4c2:	87 95       	ror	r24
     4c4:	95 95       	asr	r25
     4c6:	87 95       	ror	r24
     4c8:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <state2>
     4cc:	78 94       	sei
     4ce:	08 95       	ret

000004d0 <_Z11timer0_initv>:
     4d0:	f8 94       	cli
     4d2:	82 e0       	ldi	r24, 0x02	; 2
     4d4:	84 bd       	out	0x24, r24	; 36
     4d6:	94 e0       	ldi	r25, 0x04	; 4
     4d8:	95 bd       	out	0x25, r25	; 37
     4da:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     4de:	16 bc       	out	0x26, r1	; 38
     4e0:	89 e3       	ldi	r24, 0x39	; 57
     4e2:	87 bd       	out	0x27, r24	; 39
     4e4:	78 94       	sei
     4e6:	08 95       	ret

000004e8 <_Z11timer4_initv>:
     4e8:	f8 94       	cli
     4ea:	a1 ea       	ldi	r26, 0xA1	; 161
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	1c 92       	st	X, r1
     4f0:	8f ef       	ldi	r24, 0xFF	; 255
     4f2:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
     4fc:	eb ea       	ldi	r30, 0xAB	; 171
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	10 82       	st	Z, r1
     502:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
     506:	99 ea       	ldi	r25, 0xA9	; 169
     508:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     50c:	9b e0       	ldi	r25, 0x0B	; 11
     50e:	9c 93       	st	X, r25
     510:	10 82       	st	Z, r1
     512:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     516:	78 94       	sei
     518:	08 95       	ret

0000051a <_Z6stop_bv>:
? * Logic: sets PH7,PH6,PH2,PH1 to low
? * Example Call: stop()
? */
void stop_b (void)
{
	PORTH=PORTH&0x39;	//sets PH7, PH6, PH2, PH1 to low
     51a:	e2 e0       	ldi	r30, 0x02	; 2
     51c:	f1 e0       	ldi	r31, 0x01	; 1
     51e:	80 81       	ld	r24, Z
     520:	89 73       	andi	r24, 0x39	; 57
     522:	80 83       	st	Z, r24
     524:	08 95       	ret

00000526 <_Z17buzzer_pin_configv>:
? * Logic: sets DDRF0 as 1 and enable pull-up 
? * Example Call: buzzer_pin_config
? */
void buzzer_pin_config()
{
	DDRF|=0x01;		//Set pin PF0 as output 
     526:	80 9a       	sbi	0x10, 0	; 16
	PORTF|=0x01;	//off buzzer
     528:	88 9a       	sbi	0x11, 0	; 17
     52a:	08 95       	ret

0000052c <_Z12init_devicesv>:
? * Logic: clear global interrupt, calls all the initialization functions of the respective hardwares and enable global interrupt
? * Example Call: init_devices()
? */
void init_devices (void) //use this function to initialize all devices
{
	cli();					//disable all interrupts
     52c:	f8 94       	cli
	buzzer_pin_config();
     52e:	fb df       	rcall	.-10     	; 0x526 <_Z17buzzer_pin_configv>
	motor_pin_config();			//configure motor ports
     530:	a2 df       	rcall	.-188    	; 0x476 <_Z16motor_pin_configv>
	timer0_init();			//initialize timer0
     532:	ce df       	rcall	.-100    	; 0x4d0 <_Z11timer0_initv>
	timer4_init();			//initialize timer4
     534:	d9 df       	rcall	.-78     	; 0x4e8 <_Z11timer4_initv>
	encoder_config();		//configure encoder
     536:	b4 df       	rcall	.-152    	; 0x4a0 <_Z14encoder_configv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     538:	26 e0       	ldi	r18, 0x06	; 6
     53a:	40 e8       	ldi	r20, 0x80	; 128
     53c:	55 e2       	ldi	r21, 0x25	; 37
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	8d ea       	ldi	r24, 0xAD	; 173
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
//	uart0_init();
	uart1_init();
     54a:	87 df       	rcall	.-242    	; 0x45a <_Z10uart1_initv>
	i2c_init();
     54c:	c5 de       	rcall	.-630    	; 0x2d8 <_Z8i2c_initv>
	accelero_init();
     54e:	15 de       	rcall	.-982    	; 0x17a <_Z13accelero_initv>
	gyro_init();
     550:	8c de       	rcall	.-744    	; 0x26a <_Z9gyro_initv>
	sei();					//re-enable interrupts
     552:	78 94       	sei
     554:	08 95       	ret

00000556 <_Z20update_encoder_countv>:
? * Example Call: update_encoder_count()
? */

void update_encoder_count()
{
	state1<<=2;			//shifts state1 left by 2
     556:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <state1>
     55a:	88 0f       	add	r24, r24
     55c:	88 0f       	add	r24, r24
     55e:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <state1>
	state1|=(PINK&0x03);		//getting new state from PINK0 and PINK1
     562:	e6 e0       	ldi	r30, 0x06	; 6
     564:	f1 e0       	ldi	r31, 0x01	; 1
     566:	80 81       	ld	r24, Z
     568:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <state1>
     56c:	83 70       	andi	r24, 0x03	; 3
     56e:	89 2b       	or	r24, r25
     570:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <state1>
	state1&=0x0F;				//mask higher nibble
     574:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <state1>
     578:	8f 70       	andi	r24, 0x0F	; 15
     57a:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <state1>
	state2<<=2;				//shifts state2 left by 2
     57e:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <state2>
     582:	88 0f       	add	r24, r24
     584:	88 0f       	add	r24, r24
     586:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <state2>
	state2|=((PINK&0x0C)>>2);	//getting new state from PINK2 and PINK3
     58a:	80 81       	ld	r24, Z
     58c:	20 91 a7 02 	lds	r18, 0x02A7	; 0x8002a7 <state2>
     590:	8c 70       	andi	r24, 0x0C	; 12
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	95 95       	asr	r25
     596:	87 95       	ror	r24
     598:	95 95       	asr	r25
     59a:	87 95       	ror	r24
     59c:	82 2b       	or	r24, r18
     59e:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <state2>
	state2&=0x0F;					//mask higher nibble
     5a2:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <state2>
     5a6:	8f 70       	andi	r24, 0x0F	; 15
     5a8:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <state2>
	count1+=a[state1];				//calculate new count1
     5ac:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <state1>
     5b0:	40 91 73 02 	lds	r20, 0x0273	; 0x800273 <count1>
     5b4:	50 91 74 02 	lds	r21, 0x0274	; 0x800274 <count1+0x1>
     5b8:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <count1+0x2>
     5bc:	70 91 76 02 	lds	r23, 0x0276	; 0x800276 <count1+0x3>
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	e9 5f       	subi	r30, 0xF9	; 249
     5c4:	fd 4f       	sbci	r31, 0xFD	; 253
     5c6:	80 81       	ld	r24, Z
     5c8:	08 2e       	mov	r0, r24
     5ca:	00 0c       	add	r0, r0
     5cc:	99 0b       	sbc	r25, r25
     5ce:	aa 0b       	sbc	r26, r26
     5d0:	bb 0b       	sbc	r27, r27
     5d2:	84 0f       	add	r24, r20
     5d4:	95 1f       	adc	r25, r21
     5d6:	a6 1f       	adc	r26, r22
     5d8:	b7 1f       	adc	r27, r23
     5da:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <count1>
     5de:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <count1+0x1>
     5e2:	a0 93 75 02 	sts	0x0275, r26	; 0x800275 <count1+0x2>
     5e6:	b0 93 76 02 	sts	0x0276, r27	; 0x800276 <count1+0x3>
	count2+=a[state2];			//calculate new count1
     5ea:	e0 91 a7 02 	lds	r30, 0x02A7	; 0x8002a7 <state2>
     5ee:	40 91 6b 02 	lds	r20, 0x026B	; 0x80026b <count2>
     5f2:	50 91 6c 02 	lds	r21, 0x026C	; 0x80026c <count2+0x1>
     5f6:	60 91 6d 02 	lds	r22, 0x026D	; 0x80026d <count2+0x2>
     5fa:	70 91 6e 02 	lds	r23, 0x026E	; 0x80026e <count2+0x3>
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	e9 5f       	subi	r30, 0xF9	; 249
     602:	fd 4f       	sbci	r31, 0xFD	; 253
     604:	80 81       	ld	r24, Z
     606:	08 2e       	mov	r0, r24
     608:	00 0c       	add	r0, r0
     60a:	99 0b       	sbc	r25, r25
     60c:	aa 0b       	sbc	r26, r26
     60e:	bb 0b       	sbc	r27, r27
     610:	84 0f       	add	r24, r20
     612:	95 1f       	adc	r25, r21
     614:	a6 1f       	adc	r26, r22
     616:	b7 1f       	adc	r27, r23
     618:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <count2>
     61c:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <count2+0x1>
     620:	a0 93 6d 02 	sts	0x026D, r26	; 0x80026d <count2+0x2>
     624:	b0 93 6e 02 	sts	0x026E, r27	; 0x80026e <count2+0x3>
     628:	08 95       	ret

0000062a <__vector_11>:
? * Output: updates encoder count
? * Logic: gets executed whenever a pin of PK0 and PK1 toggles. calls update_encoder_count();
? * Example Call: automatically called
? */
ISR(PCINT2_vect)
{
     62a:	1f 92       	push	r1
     62c:	0f 92       	push	r0
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	0f 92       	push	r0
     632:	11 24       	eor	r1, r1
     634:	0b b6       	in	r0, 0x3b	; 59
     636:	0f 92       	push	r0
     638:	2f 93       	push	r18
     63a:	3f 93       	push	r19
     63c:	4f 93       	push	r20
     63e:	5f 93       	push	r21
     640:	6f 93       	push	r22
     642:	7f 93       	push	r23
     644:	8f 93       	push	r24
     646:	9f 93       	push	r25
     648:	af 93       	push	r26
     64a:	bf 93       	push	r27
     64c:	ef 93       	push	r30
     64e:	ff 93       	push	r31
	update_encoder_count(); // updates count value
     650:	82 df       	rcall	.-252    	; 0x556 <_Z20update_encoder_countv>
}
     652:	ff 91       	pop	r31
     654:	ef 91       	pop	r30
     656:	bf 91       	pop	r27
     658:	af 91       	pop	r26
     65a:	9f 91       	pop	r25
     65c:	8f 91       	pop	r24
     65e:	7f 91       	pop	r23
     660:	6f 91       	pop	r22
     662:	5f 91       	pop	r21
     664:	4f 91       	pop	r20
     666:	3f 91       	pop	r19
     668:	2f 91       	pop	r18
     66a:	0f 90       	pop	r0
     66c:	0b be       	out	0x3b, r0	; 59
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <__vector_21>:
? * Output: increments time elapsed by 1
? * Logic: Interrupt is fired after every 1ms. Counter for elapsed time is incremented by 1
? * Example Call: none. It is automatically called
? */
ISR(TIMER0_COMPA_vect)
{
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	0f 92       	push	r0
     680:	11 24       	eor	r1, r1
     682:	8f 93       	push	r24
     684:	9f 93       	push	r25
     686:	af 93       	push	r26
     688:	bf 93       	push	r27
	elapsed_time++; // increment the counter indicating 1ms time
     68a:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <elapsed_time>
     68e:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <elapsed_time+0x1>
     692:	a0 91 ab 02 	lds	r26, 0x02AB	; 0x8002ab <elapsed_time+0x2>
     696:	b0 91 ac 02 	lds	r27, 0x02AC	; 0x8002ac <elapsed_time+0x3>
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	a1 1d       	adc	r26, r1
     69e:	b1 1d       	adc	r27, r1
     6a0:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <elapsed_time>
     6a4:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <elapsed_time+0x1>
     6a8:	a0 93 ab 02 	sts	0x02AB, r26	; 0x8002ab <elapsed_time+0x2>
     6ac:	b0 93 ac 02 	sts	0x02AC, r27	; 0x8002ac <elapsed_time+0x3>
}
     6b0:	bf 91       	pop	r27
     6b2:	af 91       	pop	r26
     6b4:	9f 91       	pop	r25
     6b6:	8f 91       	pop	r24
     6b8:	0f 90       	pop	r0
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	0f 90       	pop	r0
     6be:	1f 90       	pop	r1
     6c0:	18 95       	reti

000006c2 <_Z5epochv>:
? * Output: unsigned long elapsed_time variable giving time in ms
? * Logic: Just return the elapsed_time variable which stores time elapsed in ms
? * Example Call: epoch()
? */
unsigned long epoch()
{	uint8_t oldSREG = SREG;
     6c2:	2f b7       	in	r18, 0x3f	; 63
	unsigned long t;
	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     6c4:	f8 94       	cli
	t = elapsed_time;
     6c6:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <elapsed_time>
     6ca:	70 91 aa 02 	lds	r23, 0x02AA	; 0x8002aa <elapsed_time+0x1>
     6ce:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <elapsed_time+0x2>
     6d2:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <elapsed_time+0x3>
	SREG = oldSREG;
     6d6:	2f bf       	out	0x3f, r18	; 63
	
	return t;
}
     6d8:	08 95       	ret

000006da <_Z18tilt_angles_updatev>:
? * Logic: gets acceleration in x-axis and z-axis, calculate tilt angle by accelerometer readings, gets angular velocity along y-axis,
? *			calculate tilt angle using accelerometer reading and combine both angles using complementary filter to get accurate tilt angle
? * Example Call: tilt_angles_update()
? */
void tilt_angles_update()
{
     6da:	8f 92       	push	r8
     6dc:	9f 92       	push	r9
     6de:	af 92       	push	r10
     6e0:	bf 92       	push	r11
     6e2:	cf 92       	push	r12
     6e4:	df 92       	push	r13
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	00 d0       	rcall	.+0      	; 0x6f0 <_Z18tilt_angles_updatev+0x16>
     6f0:	1f 92       	push	r1
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62

	float acc_x,acc_z,omega_y;
	float tilt_angle_accelero,tilt_angle_gyro;
	
	// get z axis and x axis acceleration
	acc_z=get_acc_z();
     6f6:	8e dd       	rcall	.-1252   	; 0x214 <_Z9get_acc_zv>
     6f8:	9b 01       	movw	r18, r22
     6fa:	ac 01       	movw	r20, r24
	acc_x=get_acc_x();
     6fc:	69 83       	std	Y+1, r22	; 0x01
     6fe:	3a 83       	std	Y+2, r19	; 0x02
     700:	4b 83       	std	Y+3, r20	; 0x03
     702:	5c 83       	std	Y+4, r21	; 0x04
     704:	5c dd       	rcall	.-1352   	; 0x1be <_Z9get_acc_xv>
	//convert the data into degrees giving pitch
	tilt_angle_accelero=-57.29*atan2(acc_x,acc_z);
     706:	29 81       	ldd	r18, Y+1	; 0x01
     708:	3a 81       	ldd	r19, Y+2	; 0x02
     70a:	4b 81       	ldd	r20, Y+3	; 0x03
     70c:	5c 81       	ldd	r21, Y+4	; 0x04
     70e:	75 d6       	rcall	.+3306   	; 0x13fa <atan2>
     710:	4b 01       	movw	r8, r22
     712:	5c 01       	movw	r10, r24
	

	/***code for measuring tilt angle using gyroscope here**/
	//get angular velocity along y axis
	omega_y=get_omega_y();
     714:	b6 dd       	rcall	.-1172   	; 0x282 <_Z11get_omega_yv>
	//calculate the angle by integrating (summation) angular velocity with time elapsed in each cycle
	tilt_angle_gyro = omega_y*.05+tilt_angle;
     716:	2d ec       	ldi	r18, 0xCD	; 205
     718:	3c ec       	ldi	r19, 0xCC	; 204
     71a:	4c e4       	ldi	r20, 0x4C	; 76
     71c:	5d e3       	ldi	r21, 0x3D	; 61
     71e:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
     722:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <tilt_angle>
     726:	30 91 a4 02 	lds	r19, 0x02A4	; 0x8002a4 <tilt_angle+0x1>
     72a:	40 91 a5 02 	lds	r20, 0x02A5	; 0x8002a5 <tilt_angle+0x2>
     72e:	50 91 a6 02 	lds	r21, 0x02A6	; 0x8002a6 <tilt_angle+0x3>
     732:	f0 d5       	rcall	.+3040   	; 0x1314 <__addsf3>
	/***end of code for measuring tilt angle using gyroscope**/
	
	
	//using complementary filter for fusion of both the sensors
	tilt_angle = tilt_angle_gyro*0.95 + tilt_angle_accelero*0.05;
     734:	23 e3       	ldi	r18, 0x33	; 51
     736:	33 e3       	ldi	r19, 0x33	; 51
     738:	43 e7       	ldi	r20, 0x73	; 115
     73a:	5f e3       	ldi	r21, 0x3F	; 63
     73c:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
     740:	6b 01       	movw	r12, r22
     742:	7c 01       	movw	r14, r24
	
	// get z axis and x axis acceleration
	acc_z=get_acc_z();
	acc_x=get_acc_x();
	//convert the data into degrees giving pitch
	tilt_angle_accelero=-57.29*atan2(acc_x,acc_z);
     744:	26 ef       	ldi	r18, 0xF6	; 246
     746:	38 e2       	ldi	r19, 0x28	; 40
     748:	45 e6       	ldi	r20, 0x65	; 101
     74a:	52 ec       	ldi	r21, 0xC2	; 194
     74c:	c5 01       	movw	r24, r10
     74e:	b4 01       	movw	r22, r8
     750:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
	tilt_angle_gyro = omega_y*.05+tilt_angle;
	/***end of code for measuring tilt angle using gyroscope**/
	
	
	//using complementary filter for fusion of both the sensors
	tilt_angle = tilt_angle_gyro*0.95 + tilt_angle_accelero*0.05;
     754:	2d ec       	ldi	r18, 0xCD	; 205
     756:	3c ec       	ldi	r19, 0xCC	; 204
     758:	4c e4       	ldi	r20, 0x4C	; 76
     75a:	5d e3       	ldi	r21, 0x3D	; 61
     75c:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
     760:	9b 01       	movw	r18, r22
     762:	ac 01       	movw	r20, r24
     764:	c7 01       	movw	r24, r14
     766:	b6 01       	movw	r22, r12
     768:	d5 d5       	rcall	.+2986   	; 0x1314 <__addsf3>
     76a:	60 93 a3 02 	sts	0x02A3, r22	; 0x8002a3 <tilt_angle>
     76e:	70 93 a4 02 	sts	0x02A4, r23	; 0x8002a4 <tilt_angle+0x1>
     772:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <tilt_angle+0x2>
     776:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <tilt_angle+0x3>
	

}
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	ff 90       	pop	r15
     788:	ef 90       	pop	r14
     78a:	df 90       	pop	r13
     78c:	cf 90       	pop	r12
     78e:	bf 90       	pop	r11
     790:	af 90       	pop	r10
     792:	9f 90       	pop	r9
     794:	8f 90       	pop	r8
     796:	08 95       	ret

00000798 <_Z16velocity_correctiii>:
? * Example Call: velocity_correct(100,100,30);
? */

void velocity_correct(int left, int right, int velocity_offset)
{
	if(left>=0)				//if left is positive then
     798:	97 fd       	sbrc	r25, 7
     79a:	0b c0       	rjmp	.+22     	; 0x7b2 <_Z16velocity_correctiii+0x1a>
	{
		left=left+velocity_offset;		//add offset
     79c:	84 0f       	add	r24, r20
     79e:	95 1f       	adc	r25, r21
		PORTH=PORTH|0x40;	//sets PH6 to high
     7a0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7a4:	20 64       	ori	r18, 0x40	; 64
     7a6:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
		PORTH=PORTH&0x7F;	// and PH7 to low
     7aa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7ae:	2f 77       	andi	r18, 0x7F	; 127
     7b0:	0c c0       	rjmp	.+24     	; 0x7ca <_Z16velocity_correctiii+0x32>
	}
	else						//if left is negative then
	{
		left=velocity_offset-left;	//add offset to negative of velocity
     7b2:	9a 01       	movw	r18, r20
     7b4:	28 1b       	sub	r18, r24
     7b6:	39 0b       	sbc	r19, r25
     7b8:	c9 01       	movw	r24, r18
		PORTH=PORTH|0x80;	//sets PH7 to high
     7ba:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7be:	20 68       	ori	r18, 0x80	; 128
     7c0:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
		PORTH=PORTH&0xBF;	//and PH6 to low
     7c4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7c8:	2f 7b       	andi	r18, 0xBF	; 191
     7ca:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7ce:	8f 3f       	cpi	r24, 0xFF	; 255
     7d0:	91 05       	cpc	r25, r1
     7d2:	19 f0       	breq	.+6      	; 0x7da <_Z16velocity_correctiii+0x42>
     7d4:	14 f0       	brlt	.+4      	; 0x7da <_Z16velocity_correctiii+0x42>
     7d6:	8f ef       	ldi	r24, 0xFF	; 255
     7d8:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(left>255)					//bound left to 255
	left=255;
	OCR4BL=(unsigned char)left;		//give velocity to left motor
     7da:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
	if(right>=0)		//if right is positive then
     7de:	77 fd       	sbrc	r23, 7
     7e0:	0b c0       	rjmp	.+22     	; 0x7f8 <_Z16velocity_correctiii+0x60>
	{
		right=right+velocity_offset;		//add offset to right
     7e2:	46 0f       	add	r20, r22
     7e4:	57 1f       	adc	r21, r23
		PORTH=PORTH|0x02;			//set PH1 to high
     7e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7ea:	82 60       	ori	r24, 0x02	; 2
     7ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
		PORTH=PORTH&0xFB;			//set PH2 to low
     7f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7f4:	8b 7f       	andi	r24, 0xFB	; 251
     7f6:	0a c0       	rjmp	.+20     	; 0x80c <_Z16velocity_correctiii+0x74>
	}
	else						//if right is negative then
	{
		right=velocity_offset-right;			//add negative of it to offset
     7f8:	46 1b       	sub	r20, r22
     7fa:	57 0b       	sbc	r21, r23
		PORTH=PORTH|0x04;						//set PH2 high
     7fc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     800:	84 60       	ori	r24, 0x04	; 4
     802:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
		PORTH=PORTH&0xFD;					//set PH1 to low
     806:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     80a:	8d 7f       	andi	r24, 0xFD	; 253
     80c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     810:	4f 3f       	cpi	r20, 0xFF	; 255
     812:	51 05       	cpc	r21, r1
     814:	19 f0       	breq	.+6      	; 0x81c <_Z16velocity_correctiii+0x84>
     816:	14 f0       	brlt	.+4      	; 0x81c <_Z16velocity_correctiii+0x84>
     818:	4f ef       	ldi	r20, 0xFF	; 255
     81a:	50 e0       	ldi	r21, 0x00	; 0
	}
	if(right>255)					//bound right velocity
	right=255;						
	OCR4AL=(unsigned char)right;		//apply velocity to right motor
     81c:	40 93 a8 00 	sts	0x00A8, r20	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     820:	08 95       	ret

00000822 <_Z15constrain_valuePfff>:
}

void constrain_value(float *value, float lower_limit,float upper_limit)
{
     822:	8f 92       	push	r8
     824:	9f 92       	push	r9
     826:	af 92       	push	r10
     828:	bf 92       	push	r11
     82a:	cf 92       	push	r12
     82c:	df 92       	push	r13
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	ec 01       	movw	r28, r24
     83c:	6a 01       	movw	r12, r20
     83e:	7b 01       	movw	r14, r22
     840:	48 01       	movw	r8, r16
     842:	59 01       	movw	r10, r18
	if(*value>upper_limit)
     844:	a9 01       	movw	r20, r18
     846:	98 01       	movw	r18, r16
     848:	68 81       	ld	r22, Y
     84a:	79 81       	ldd	r23, Y+1	; 0x01
     84c:	8a 81       	ldd	r24, Y+2	; 0x02
     84e:	9b 81       	ldd	r25, Y+3	; 0x03
     850:	9b d7       	rcall	.+3894   	; 0x1788 <__gesf2>
     852:	18 16       	cp	r1, r24
     854:	24 f4       	brge	.+8      	; 0x85e <_Z15constrain_valuePfff+0x3c>
	*value=upper_limit;
     856:	88 82       	st	Y, r8
     858:	99 82       	std	Y+1, r9	; 0x01
     85a:	aa 82       	std	Y+2, r10	; 0x02
     85c:	bb 82       	std	Y+3, r11	; 0x03
	if(*value<lower_limit)
     85e:	a7 01       	movw	r20, r14
     860:	96 01       	movw	r18, r12
     862:	68 81       	ld	r22, Y
     864:	79 81       	ldd	r23, Y+1	; 0x01
     866:	8a 81       	ldd	r24, Y+2	; 0x02
     868:	9b 81       	ldd	r25, Y+3	; 0x03
     86a:	1a d6       	rcall	.+3124   	; 0x14a0 <__cmpsf2>
     86c:	87 ff       	sbrs	r24, 7
     86e:	04 c0       	rjmp	.+8      	; 0x878 <_Z15constrain_valuePfff+0x56>
	*value=lower_limit;
     870:	c8 82       	st	Y, r12
     872:	d9 82       	std	Y+1, r13	; 0x01
     874:	ea 82       	std	Y+2, r14	; 0x02
     876:	fb 82       	std	Y+3, r15	; 0x03
}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	df 90       	pop	r13
     886:	cf 90       	pop	r12
     888:	bf 90       	pop	r11
     88a:	af 90       	pop	r10
     88c:	9f 90       	pop	r9
     88e:	8f 90       	pop	r8
     890:	08 95       	ret

00000892 <_Z9pid_anglev>:
? * Output: update PID value and motor velocity
? * Logic: Calculate proportional term, Integral term and derivative term and evaluate motor speed using this values
? * Example Call: pid_angle()
? */
void pid_angle()
{
     892:	4f 92       	push	r4
     894:	5f 92       	push	r5
     896:	6f 92       	push	r6
     898:	7f 92       	push	r7
     89a:	8f 92       	push	r8
     89c:	9f 92       	push	r9
     89e:	af 92       	push	r10
     8a0:	bf 92       	push	r11
     8a2:	cf 92       	push	r12
     8a4:	df 92       	push	r13
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	2c 97       	sbiw	r28, 0x0c	; 12
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
	float P1,D1,P2,D2,vel1,vel2;		//P,D and output velocity for left and right motor
	tilt_angle_error1=tilt_angle-set_angle1;	//error in tilt angle for motor1
     8c2:	80 90 a3 02 	lds	r8, 0x02A3	; 0x8002a3 <tilt_angle>
     8c6:	90 90 a4 02 	lds	r9, 0x02A4	; 0x8002a4 <tilt_angle+0x1>
     8ca:	a0 90 a5 02 	lds	r10, 0x02A5	; 0x8002a5 <tilt_angle+0x2>
     8ce:	b0 90 a6 02 	lds	r11, 0x02A6	; 0x8002a6 <tilt_angle+0x3>
     8d2:	20 91 7b 02 	lds	r18, 0x027B	; 0x80027b <set_angle1>
     8d6:	30 91 7c 02 	lds	r19, 0x027C	; 0x80027c <set_angle1+0x1>
     8da:	40 91 7d 02 	lds	r20, 0x027D	; 0x80027d <set_angle1+0x2>
     8de:	50 91 7e 02 	lds	r21, 0x027E	; 0x80027e <set_angle1+0x3>
     8e2:	c5 01       	movw	r24, r10
     8e4:	b4 01       	movw	r22, r8
     8e6:	15 d5       	rcall	.+2602   	; 0x1312 <__subsf3>
     8e8:	6b 01       	movw	r12, r22
     8ea:	7c 01       	movw	r14, r24
     8ec:	60 93 9f 02 	sts	0x029F, r22	; 0x80029f <tilt_angle_error1>
     8f0:	70 93 a0 02 	sts	0x02A0, r23	; 0x8002a0 <tilt_angle_error1+0x1>
     8f4:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <tilt_angle_error1+0x2>
     8f8:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <tilt_angle_error1+0x3>
	tilt_angle_error2=tilt_angle-set_angle2;	//error in tilt angle for motor2
     8fc:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <set_angle2>
     900:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <set_angle2+0x1>
     904:	40 91 79 02 	lds	r20, 0x0279	; 0x800279 <set_angle2+0x2>
     908:	50 91 7a 02 	lds	r21, 0x027A	; 0x80027a <set_angle2+0x3>
     90c:	c5 01       	movw	r24, r10
     90e:	b4 01       	movw	r22, r8
     910:	00 d5       	rcall	.+2560   	; 0x1312 <__subsf3>
     912:	2b 01       	movw	r4, r22
     914:	3c 01       	movw	r6, r24
     916:	60 93 9b 02 	sts	0x029B, r22	; 0x80029b <tilt_angle_error2>
     91a:	70 93 9c 02 	sts	0x029C, r23	; 0x80029c <tilt_angle_error2+0x1>
     91e:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <tilt_angle_error2+0x2>
     922:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <tilt_angle_error2+0x3>
	derivative_tilt_angle_error1=tilt_angle-previous_tilt_angle;	//derivative of error in tilt angle for motor1
     926:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <previous_tilt_angle>
     92a:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <previous_tilt_angle+0x1>
     92e:	40 91 81 02 	lds	r20, 0x0281	; 0x800281 <previous_tilt_angle+0x2>
     932:	50 91 82 02 	lds	r21, 0x0282	; 0x800282 <previous_tilt_angle+0x3>
     936:	c5 01       	movw	r24, r10
     938:	b4 01       	movw	r22, r8
     93a:	eb d4       	rcall	.+2518   	; 0x1312 <__subsf3>
     93c:	60 93 8f 02 	sts	0x028F, r22	; 0x80028f <derivative_tilt_angle_error1>
     940:	70 93 90 02 	sts	0x0290, r23	; 0x800290 <derivative_tilt_angle_error1+0x1>
     944:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <derivative_tilt_angle_error1+0x2>
     948:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <derivative_tilt_angle_error1+0x3>
	derivative_tilt_angle_error2=tilt_angle-previous_tilt_angle;	//derivative of error in tilt angle for motor2
     94c:	60 93 8b 02 	sts	0x028B, r22	; 0x80028b <derivative_tilt_angle_error2>
     950:	70 93 8c 02 	sts	0x028C, r23	; 0x80028c <derivative_tilt_angle_error2+0x1>
     954:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <derivative_tilt_angle_error2+0x2>
     958:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <derivative_tilt_angle_error2+0x3>
	previous_tilt_angle_error1=tilt_angle_error1;				//set previous error to present error for motor1
     95c:	c0 92 87 02 	sts	0x0287, r12	; 0x800287 <previous_tilt_angle_error1>
     960:	d0 92 88 02 	sts	0x0288, r13	; 0x800288 <previous_tilt_angle_error1+0x1>
     964:	e0 92 89 02 	sts	0x0289, r14	; 0x800289 <previous_tilt_angle_error1+0x2>
     968:	f0 92 8a 02 	sts	0x028A, r15	; 0x80028a <previous_tilt_angle_error1+0x3>
	previous_tilt_angle_error2=tilt_angle_error2;				//set previous error to present error for motor1
     96c:	40 92 83 02 	sts	0x0283, r4	; 0x800283 <previous_tilt_angle_error2>
     970:	50 92 84 02 	sts	0x0284, r5	; 0x800284 <previous_tilt_angle_error2+0x1>
     974:	60 92 85 02 	sts	0x0285, r6	; 0x800285 <previous_tilt_angle_error2+0x2>
     978:	70 92 86 02 	sts	0x0286, r7	; 0x800286 <previous_tilt_angle_error2+0x3>
	previous_tilt_angle=tilt_angle;							//set previous tilt angle to present tilt angle
     97c:	80 92 7f 02 	sts	0x027F, r8	; 0x80027f <previous_tilt_angle>
     980:	90 92 80 02 	sts	0x0280, r9	; 0x800280 <previous_tilt_angle+0x1>
     984:	a0 92 81 02 	sts	0x0281, r10	; 0x800281 <previous_tilt_angle+0x2>
     988:	b0 92 82 02 	sts	0x0282, r11	; 0x800282 <previous_tilt_angle+0x3>
	P1=kp*tilt_angle_error1;			//proportional term calculation for motor1
     98c:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <kp>
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	23 d6       	rcall	.+3142   	; 0x15de <__floatsisf>
     998:	4b 01       	movw	r8, r22
     99a:	5c 01       	movw	r10, r24
     99c:	a7 01       	movw	r20, r14
     99e:	96 01       	movw	r18, r12
     9a0:	fe d6       	rcall	.+3580   	; 0x179e <__mulsf3>
     9a2:	69 87       	std	Y+9, r22	; 0x09
     9a4:	7a 87       	std	Y+10, r23	; 0x0a
     9a6:	8b 87       	std	Y+11, r24	; 0x0b
     9a8:	9c 87       	std	Y+12, r25	; 0x0c
	P2=kp*tilt_angle_error2;			//proportional term calculation for motor2
     9aa:	a3 01       	movw	r20, r6
     9ac:	92 01       	movw	r18, r4
     9ae:	c5 01       	movw	r24, r10
     9b0:	b4 01       	movw	r22, r8
     9b2:	f5 d6       	rcall	.+3562   	; 0x179e <__mulsf3>
     9b4:	4b 01       	movw	r8, r22
     9b6:	5c 01       	movw	r10, r24
	integral_tilt_angle1_error+=(ki/10.0)*(tilt_angle_error1);			// integral term calculation for motor1
     9b8:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <ki>
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0d d6       	rcall	.+3098   	; 0x15de <__floatsisf>
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	40 e2       	ldi	r20, 0x20	; 32
     9ca:	51 e4       	ldi	r21, 0x41	; 65
     9cc:	6d d5       	rcall	.+2778   	; 0x14a8 <__divsf3>
     9ce:	a7 01       	movw	r20, r14
     9d0:	96 01       	movw	r18, r12
     9d2:	e5 d6       	rcall	.+3530   	; 0x179e <__mulsf3>
     9d4:	9b 01       	movw	r18, r22
     9d6:	ac 01       	movw	r20, r24
     9d8:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <integral_tilt_angle1_error>
     9dc:	70 91 98 02 	lds	r23, 0x0298	; 0x800298 <integral_tilt_angle1_error+0x1>
     9e0:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <integral_tilt_angle1_error+0x2>
     9e4:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <integral_tilt_angle1_error+0x3>
     9e8:	95 d4       	rcall	.+2346   	; 0x1314 <__addsf3>
     9ea:	60 93 97 02 	sts	0x0297, r22	; 0x800297 <integral_tilt_angle1_error>
     9ee:	70 93 98 02 	sts	0x0298, r23	; 0x800298 <integral_tilt_angle1_error+0x1>
     9f2:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <integral_tilt_angle1_error+0x2>
     9f6:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <integral_tilt_angle1_error+0x3>
	constrain_value(&integral_tilt_angle1_error,-250,250);
     9fa:	00 e0       	ldi	r16, 0x00	; 0
     9fc:	10 e0       	ldi	r17, 0x00	; 0
     9fe:	2a e7       	ldi	r18, 0x7A	; 122
     a00:	33 e4       	ldi	r19, 0x43	; 67
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	6a e7       	ldi	r22, 0x7A	; 122
     a08:	73 ec       	ldi	r23, 0xC3	; 195
     a0a:	87 e9       	ldi	r24, 0x97	; 151
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	09 df       	rcall	.-494    	; 0x822 <_Z15constrain_valuePfff>
	integral_tilt_angle2_error+=(ki/10.0)*(tilt_angle_error2);			// integral term calculation for motor2
     a10:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <ki>
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	e1 d5       	rcall	.+3010   	; 0x15de <__floatsisf>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e2       	ldi	r20, 0x20	; 32
     a22:	51 e4       	ldi	r21, 0x41	; 65
     a24:	41 d5       	rcall	.+2690   	; 0x14a8 <__divsf3>
     a26:	20 91 9b 02 	lds	r18, 0x029B	; 0x80029b <tilt_angle_error2>
     a2a:	30 91 9c 02 	lds	r19, 0x029C	; 0x80029c <tilt_angle_error2+0x1>
     a2e:	40 91 9d 02 	lds	r20, 0x029D	; 0x80029d <tilt_angle_error2+0x2>
     a32:	50 91 9e 02 	lds	r21, 0x029E	; 0x80029e <tilt_angle_error2+0x3>
     a36:	b3 d6       	rcall	.+3430   	; 0x179e <__mulsf3>
     a38:	9b 01       	movw	r18, r22
     a3a:	ac 01       	movw	r20, r24
     a3c:	60 91 93 02 	lds	r22, 0x0293	; 0x800293 <integral_tilt_angle2_error>
     a40:	70 91 94 02 	lds	r23, 0x0294	; 0x800294 <integral_tilt_angle2_error+0x1>
     a44:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <integral_tilt_angle2_error+0x2>
     a48:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <integral_tilt_angle2_error+0x3>
     a4c:	63 d4       	rcall	.+2246   	; 0x1314 <__addsf3>
     a4e:	60 93 93 02 	sts	0x0293, r22	; 0x800293 <integral_tilt_angle2_error>
     a52:	70 93 94 02 	sts	0x0294, r23	; 0x800294 <integral_tilt_angle2_error+0x1>
     a56:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <integral_tilt_angle2_error+0x2>
     a5a:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <integral_tilt_angle2_error+0x3>
	constrain_value(&integral_tilt_angle2_error,-250,250);			//bounding the integral
     a5e:	00 e0       	ldi	r16, 0x00	; 0
     a60:	10 e0       	ldi	r17, 0x00	; 0
     a62:	2a e7       	ldi	r18, 0x7A	; 122
     a64:	33 e4       	ldi	r19, 0x43	; 67
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	6a e7       	ldi	r22, 0x7A	; 122
     a6c:	73 ec       	ldi	r23, 0xC3	; 195
     a6e:	83 e9       	ldi	r24, 0x93	; 147
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	d7 de       	rcall	.-594    	; 0x822 <_Z15constrain_valuePfff>
	D1=kd*derivative_tilt_angle_error1;		//calculating derivative term for motor1
     a74:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <kd>
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	af d5       	rcall	.+2910   	; 0x15de <__floatsisf>
     a80:	6b 01       	movw	r12, r22
     a82:	7c 01       	movw	r14, r24
     a84:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <derivative_tilt_angle_error1>
     a88:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <derivative_tilt_angle_error1+0x1>
     a8c:	40 91 91 02 	lds	r20, 0x0291	; 0x800291 <derivative_tilt_angle_error1+0x2>
     a90:	50 91 92 02 	lds	r21, 0x0292	; 0x800292 <derivative_tilt_angle_error1+0x3>
     a94:	84 d6       	rcall	.+3336   	; 0x179e <__mulsf3>
     a96:	6d 83       	std	Y+5, r22	; 0x05
     a98:	7e 83       	std	Y+6, r23	; 0x06
     a9a:	8f 83       	std	Y+7, r24	; 0x07
     a9c:	98 87       	std	Y+8, r25	; 0x08
	D2=kd*derivative_tilt_angle_error2;		//calculating derivative term for motor2
     a9e:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <derivative_tilt_angle_error2>
     aa2:	30 91 8c 02 	lds	r19, 0x028C	; 0x80028c <derivative_tilt_angle_error2+0x1>
     aa6:	40 91 8d 02 	lds	r20, 0x028D	; 0x80028d <derivative_tilt_angle_error2+0x2>
     aaa:	50 91 8e 02 	lds	r21, 0x028E	; 0x80028e <derivative_tilt_angle_error2+0x3>
     aae:	c7 01       	movw	r24, r14
     ab0:	b6 01       	movw	r22, r12
     ab2:	75 d6       	rcall	.+3306   	; 0x179e <__mulsf3>
     ab4:	69 83       	std	Y+1, r22	; 0x01
     ab6:	7a 83       	std	Y+2, r23	; 0x02
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	9c 83       	std	Y+4, r25	; 0x04
	constrain_value(&D1,-150,150);
     abc:	00 e0       	ldi	r16, 0x00	; 0
     abe:	10 e0       	ldi	r17, 0x00	; 0
     ac0:	26 e1       	ldi	r18, 0x16	; 22
     ac2:	33 e4       	ldi	r19, 0x43	; 67
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	66 e1       	ldi	r22, 0x16	; 22
     aca:	73 ec       	ldi	r23, 0xC3	; 195
     acc:	ce 01       	movw	r24, r28
     ace:	05 96       	adiw	r24, 0x05	; 5
     ad0:	a8 de       	rcall	.-688    	; 0x822 <_Z15constrain_valuePfff>
	constrain_value(&D2,-150,150);
     ad2:	00 e0       	ldi	r16, 0x00	; 0
     ad4:	10 e0       	ldi	r17, 0x00	; 0
     ad6:	26 e1       	ldi	r18, 0x16	; 22
     ad8:	33 e4       	ldi	r19, 0x43	; 67
     ada:	40 e0       	ldi	r20, 0x00	; 0
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	66 e1       	ldi	r22, 0x16	; 22
     ae0:	73 ec       	ldi	r23, 0xC3	; 195
     ae2:	ce 01       	movw	r24, r28
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	9d de       	rcall	.-710    	; 0x822 <_Z15constrain_valuePfff>
	vel1=P1 + integral_tilt_angle1_error + D1;				//calculate net PID velocity for motor1
     ae8:	c0 90 97 02 	lds	r12, 0x0297	; 0x800297 <integral_tilt_angle1_error>
     aec:	d0 90 98 02 	lds	r13, 0x0298	; 0x800298 <integral_tilt_angle1_error+0x1>
     af0:	e0 90 99 02 	lds	r14, 0x0299	; 0x800299 <integral_tilt_angle1_error+0x2>
     af4:	f0 90 9a 02 	lds	r15, 0x029A	; 0x80029a <integral_tilt_angle1_error+0x3>
	vel2=P2 + integral_tilt_angle1_error + D2;				//calculate net PID velocity for motor2
	velocity_correct(vel2,vel1,offset);		//apply the calculated velocities to motors
     af8:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <offset>
     afc:	08 2f       	mov	r16, r24
     afe:	10 e0       	ldi	r17, 0x00	; 0
	constrain_value(&integral_tilt_angle2_error,-250,250);			//bounding the integral
	D1=kd*derivative_tilt_angle_error1;		//calculating derivative term for motor1
	D2=kd*derivative_tilt_angle_error2;		//calculating derivative term for motor2
	constrain_value(&D1,-150,150);
	constrain_value(&D2,-150,150);
	vel1=P1 + integral_tilt_angle1_error + D1;				//calculate net PID velocity for motor1
     b00:	a7 01       	movw	r20, r14
     b02:	96 01       	movw	r18, r12
     b04:	69 85       	ldd	r22, Y+9	; 0x09
     b06:	7a 85       	ldd	r23, Y+10	; 0x0a
     b08:	8b 85       	ldd	r24, Y+11	; 0x0b
     b0a:	9c 85       	ldd	r25, Y+12	; 0x0c
     b0c:	03 d4       	rcall	.+2054   	; 0x1314 <__addsf3>
     b0e:	2d 81       	ldd	r18, Y+5	; 0x05
     b10:	3e 81       	ldd	r19, Y+6	; 0x06
     b12:	4f 81       	ldd	r20, Y+7	; 0x07
     b14:	58 85       	ldd	r21, Y+8	; 0x08
     b16:	fe d3       	rcall	.+2044   	; 0x1314 <__addsf3>
	vel2=P2 + integral_tilt_angle1_error + D2;				//calculate net PID velocity for motor2
	velocity_correct(vel2,vel1,offset);		//apply the calculated velocities to motors
     b18:	2f d5       	rcall	.+2654   	; 0x1578 <__fixsfsi>
     b1a:	2b 01       	movw	r4, r22
     b1c:	3c 01       	movw	r6, r24
	D1=kd*derivative_tilt_angle_error1;		//calculating derivative term for motor1
	D2=kd*derivative_tilt_angle_error2;		//calculating derivative term for motor2
	constrain_value(&D1,-150,150);
	constrain_value(&D2,-150,150);
	vel1=P1 + integral_tilt_angle1_error + D1;				//calculate net PID velocity for motor1
	vel2=P2 + integral_tilt_angle1_error + D2;				//calculate net PID velocity for motor2
     b1e:	a7 01       	movw	r20, r14
     b20:	96 01       	movw	r18, r12
     b22:	c5 01       	movw	r24, r10
     b24:	b4 01       	movw	r22, r8
     b26:	f6 d3       	rcall	.+2028   	; 0x1314 <__addsf3>
     b28:	29 81       	ldd	r18, Y+1	; 0x01
     b2a:	3a 81       	ldd	r19, Y+2	; 0x02
     b2c:	4b 81       	ldd	r20, Y+3	; 0x03
     b2e:	5c 81       	ldd	r21, Y+4	; 0x04
     b30:	f1 d3       	rcall	.+2018   	; 0x1314 <__addsf3>
	velocity_correct(vel2,vel1,offset);		//apply the calculated velocities to motors
     b32:	22 d5       	rcall	.+2628   	; 0x1578 <__fixsfsi>
     b34:	dc 01       	movw	r26, r24
     b36:	cb 01       	movw	r24, r22
     b38:	a8 01       	movw	r20, r16
     b3a:	b2 01       	movw	r22, r4
     b3c:	2d de       	rcall	.-934    	; 0x798 <_Z16velocity_correctiii>
}
     b3e:	2c 96       	adiw	r28, 0x0c	; 12
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	df 90       	pop	r13
     b58:	cf 90       	pop	r12
     b5a:	bf 90       	pop	r11
     b5c:	af 90       	pop	r10
     b5e:	9f 90       	pop	r9
     b60:	8f 90       	pop	r8
     b62:	7f 90       	pop	r7
     b64:	6f 90       	pop	r6
     b66:	5f 90       	pop	r5
     b68:	4f 90       	pop	r4
     b6a:	08 95       	ret

00000b6c <_Z12pid_velocityv>:

void pid_velocity()
{	motor1_speed=count1-previous_count1;		//calculate motor1 speed
     b6c:	4f 92       	push	r4
     b6e:	5f 92       	push	r5
     b70:	6f 92       	push	r6
     b72:	7f 92       	push	r7
     b74:	8f 92       	push	r8
     b76:	9f 92       	push	r9
     b78:	af 92       	push	r10
     b7a:	bf 92       	push	r11
     b7c:	cf 92       	push	r12
     b7e:	df 92       	push	r13
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	60 97       	sbiw	r28, 0x10	; 16
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <count1>
     ba0:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <count1+0x1>
     ba4:	a0 91 75 02 	lds	r26, 0x0275	; 0x800275 <count1+0x2>
     ba8:	b0 91 76 02 	lds	r27, 0x0276	; 0x800276 <count1+0x3>
     bac:	c0 90 6f 02 	lds	r12, 0x026F	; 0x80026f <previous_count1>
     bb0:	d0 90 70 02 	lds	r13, 0x0270	; 0x800270 <previous_count1+0x1>
     bb4:	e0 90 71 02 	lds	r14, 0x0271	; 0x800271 <previous_count1+0x2>
     bb8:	f0 90 72 02 	lds	r15, 0x0272	; 0x800272 <previous_count1+0x3>
     bbc:	bc 01       	movw	r22, r24
     bbe:	cd 01       	movw	r24, r26
     bc0:	6c 19       	sub	r22, r12
     bc2:	7d 09       	sbc	r23, r13
     bc4:	8e 09       	sbc	r24, r14
     bc6:	9f 09       	sbc	r25, r15
     bc8:	0a d5       	rcall	.+2580   	; 0x15de <__floatsisf>
     bca:	2b 01       	movw	r4, r22
     bcc:	3c 01       	movw	r6, r24
     bce:	60 93 63 02 	sts	0x0263, r22	; 0x800263 <motor1_speed>
     bd2:	70 93 64 02 	sts	0x0264, r23	; 0x800264 <motor1_speed+0x1>
     bd6:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <motor1_speed+0x2>
     bda:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <motor1_speed+0x3>
	motor2_speed=count2-previous_count2;		//calculate motor2 speed
     bde:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <count2>
     be2:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <count2+0x1>
     be6:	a0 91 6d 02 	lds	r26, 0x026D	; 0x80026d <count2+0x2>
     bea:	b0 91 6e 02 	lds	r27, 0x026E	; 0x80026e <count2+0x3>
     bee:	c0 90 67 02 	lds	r12, 0x0267	; 0x800267 <previous_count2>
     bf2:	d0 90 68 02 	lds	r13, 0x0268	; 0x800268 <previous_count2+0x1>
     bf6:	e0 90 69 02 	lds	r14, 0x0269	; 0x800269 <previous_count2+0x2>
     bfa:	f0 90 6a 02 	lds	r15, 0x026A	; 0x80026a <previous_count2+0x3>
     bfe:	bc 01       	movw	r22, r24
     c00:	cd 01       	movw	r24, r26
     c02:	6c 19       	sub	r22, r12
     c04:	7d 09       	sbc	r23, r13
     c06:	8e 09       	sbc	r24, r14
     c08:	9f 09       	sbc	r25, r15
     c0a:	e9 d4       	rcall	.+2514   	; 0x15de <__floatsisf>
     c0c:	6b 01       	movw	r12, r22
     c0e:	7c 01       	movw	r14, r24
     c10:	60 93 5f 02 	sts	0x025F, r22	; 0x80025f <motor2_speed>
     c14:	70 93 60 02 	sts	0x0260, r23	; 0x800260 <motor2_speed+0x1>
     c18:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <motor2_speed+0x2>
     c1c:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <motor2_speed+0x3>
	motor1_speed_error=motor1_speed-translational_velocity+rotational_velocity;	//calculate error in motor1 speed
     c20:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <translational_velocity>
     c24:	06 2e       	mov	r0, r22
     c26:	00 0c       	add	r0, r0
     c28:	77 0b       	sbc	r23, r23
     c2a:	88 0b       	sbc	r24, r24
     c2c:	99 0b       	sbc	r25, r25
     c2e:	d7 d4       	rcall	.+2478   	; 0x15de <__floatsisf>
     c30:	4b 01       	movw	r8, r22
     c32:	5c 01       	movw	r10, r24
     c34:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <rotational_velocity>
     c38:	06 2e       	mov	r0, r22
     c3a:	00 0c       	add	r0, r0
     c3c:	77 0b       	sbc	r23, r23
     c3e:	88 0b       	sbc	r24, r24
     c40:	99 0b       	sbc	r25, r25
     c42:	cd d4       	rcall	.+2458   	; 0x15de <__floatsisf>
     c44:	69 83       	std	Y+1, r22	; 0x01
     c46:	7a 83       	std	Y+2, r23	; 0x02
     c48:	8b 83       	std	Y+3, r24	; 0x03
     c4a:	9c 83       	std	Y+4, r25	; 0x04
     c4c:	a5 01       	movw	r20, r10
     c4e:	94 01       	movw	r18, r8
     c50:	c3 01       	movw	r24, r6
     c52:	b2 01       	movw	r22, r4
     c54:	5e d3       	rcall	.+1724   	; 0x1312 <__subsf3>
     c56:	29 81       	ldd	r18, Y+1	; 0x01
     c58:	3a 81       	ldd	r19, Y+2	; 0x02
     c5a:	4b 81       	ldd	r20, Y+3	; 0x03
     c5c:	5c 81       	ldd	r21, Y+4	; 0x04
     c5e:	5a d3       	rcall	.+1716   	; 0x1314 <__addsf3>
     c60:	2b 01       	movw	r4, r22
     c62:	3c 01       	movw	r6, r24
     c64:	60 93 53 02 	sts	0x0253, r22	; 0x800253 <motor1_speed_error>
     c68:	70 93 54 02 	sts	0x0254, r23	; 0x800254 <motor1_speed_error+0x1>
     c6c:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <motor1_speed_error+0x2>
     c70:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <motor1_speed_error+0x3>
	motor2_speed_error=motor2_speed-translational_velocity-rotational_velocity; //calculate error in motor2 speed
     c74:	a5 01       	movw	r20, r10
     c76:	94 01       	movw	r18, r8
     c78:	c7 01       	movw	r24, r14
     c7a:	b6 01       	movw	r22, r12
     c7c:	4a d3       	rcall	.+1684   	; 0x1312 <__subsf3>
     c7e:	29 81       	ldd	r18, Y+1	; 0x01
     c80:	3a 81       	ldd	r19, Y+2	; 0x02
     c82:	4b 81       	ldd	r20, Y+3	; 0x03
     c84:	5c 81       	ldd	r21, Y+4	; 0x04
     c86:	45 d3       	rcall	.+1674   	; 0x1312 <__subsf3>
     c88:	6b 01       	movw	r12, r22
     c8a:	7c 01       	movw	r14, r24
     c8c:	60 93 4f 02 	sts	0x024F, r22	; 0x80024f <motor2_speed_error>
     c90:	70 93 50 02 	sts	0x0250, r23	; 0x800250 <motor2_speed_error+0x1>
     c94:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <motor2_speed_error+0x2>
     c98:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <motor2_speed_error+0x3>
	integral_motor1_speed_error+=ki_velocity_control*motor1_speed_error;	//calculate integral error of motor1 speed
     c9c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <ki_velocity_control>
     ca0:	68 2f       	mov	r22, r24
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	9a d4       	rcall	.+2356   	; 0x15de <__floatsisf>
     caa:	4b 01       	movw	r8, r22
     cac:	5c 01       	movw	r10, r24
     cae:	a3 01       	movw	r20, r6
     cb0:	92 01       	movw	r18, r4
     cb2:	75 d5       	rcall	.+2794   	; 0x179e <__mulsf3>
     cb4:	9b 01       	movw	r18, r22
     cb6:	ac 01       	movw	r20, r24
     cb8:	60 91 43 02 	lds	r22, 0x0243	; 0x800243 <integral_motor1_speed_error>
     cbc:	70 91 44 02 	lds	r23, 0x0244	; 0x800244 <integral_motor1_speed_error+0x1>
     cc0:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <integral_motor1_speed_error+0x2>
     cc4:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <integral_motor1_speed_error+0x3>
     cc8:	25 d3       	rcall	.+1610   	; 0x1314 <__addsf3>
     cca:	60 93 43 02 	sts	0x0243, r22	; 0x800243 <integral_motor1_speed_error>
     cce:	70 93 44 02 	sts	0x0244, r23	; 0x800244 <integral_motor1_speed_error+0x1>
     cd2:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <integral_motor1_speed_error+0x2>
     cd6:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <integral_motor1_speed_error+0x3>
	integral_motor2_speed_error+=ki_velocity_control*motor2_speed_error;	//calculate integral error of motor2 speed
     cda:	a7 01       	movw	r20, r14
     cdc:	96 01       	movw	r18, r12
     cde:	c5 01       	movw	r24, r10
     ce0:	b4 01       	movw	r22, r8
     ce2:	5d d5       	rcall	.+2746   	; 0x179e <__mulsf3>
     ce4:	9b 01       	movw	r18, r22
     ce6:	ac 01       	movw	r20, r24
     ce8:	60 91 3f 02 	lds	r22, 0x023F	; 0x80023f <integral_motor2_speed_error>
     cec:	70 91 40 02 	lds	r23, 0x0240	; 0x800240 <integral_motor2_speed_error+0x1>
     cf0:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <integral_motor2_speed_error+0x2>
     cf4:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <integral_motor2_speed_error+0x3>
     cf8:	0d d3       	rcall	.+1562   	; 0x1314 <__addsf3>
     cfa:	60 93 3f 02 	sts	0x023F, r22	; 0x80023f <integral_motor2_speed_error>
     cfe:	70 93 40 02 	sts	0x0240, r23	; 0x800240 <integral_motor2_speed_error+0x1>
     d02:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <integral_motor2_speed_error+0x2>
     d06:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <integral_motor2_speed_error+0x3>
	constrain_value(&integral_motor1_speed_error,-80000,50000);
     d0a:	00 e0       	ldi	r16, 0x00	; 0
     d0c:	10 e5       	ldi	r17, 0x50	; 80
     d0e:	23 e4       	ldi	r18, 0x43	; 67
     d10:	37 e4       	ldi	r19, 0x47	; 71
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	50 e4       	ldi	r21, 0x40	; 64
     d16:	6c e9       	ldi	r22, 0x9C	; 156
     d18:	77 ec       	ldi	r23, 0xC7	; 199
     d1a:	83 e4       	ldi	r24, 0x43	; 67
     d1c:	92 e0       	ldi	r25, 0x02	; 2
     d1e:	81 dd       	rcall	.-1278   	; 0x822 <_Z15constrain_valuePfff>
	constrain_value(&integral_motor2_speed_error,-80000,50000);
     d20:	00 e0       	ldi	r16, 0x00	; 0
     d22:	10 e5       	ldi	r17, 0x50	; 80
     d24:	23 e4       	ldi	r18, 0x43	; 67
     d26:	37 e4       	ldi	r19, 0x47	; 71
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	50 e4       	ldi	r21, 0x40	; 64
     d2c:	6c e9       	ldi	r22, 0x9C	; 156
     d2e:	77 ec       	ldi	r23, 0xC7	; 199
     d30:	8f e3       	ldi	r24, 0x3F	; 63
     d32:	92 e0       	ldi	r25, 0x02	; 2
     d34:	76 dd       	rcall	.-1300   	; 0x822 <_Z15constrain_valuePfff>
	set_angle1=angle_offset+integral_motor1_speed_error/5000.0 + kp_velocity_control*(motor1_speed_error)/1000.0+kd__velocity_control*(motor1_speed-previous_motor1_speed)/1000.0;
     d36:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <angle_offset>
     d3a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <angle_offset+0x1>
     d3e:	a0 91 3a 02 	lds	r26, 0x023A	; 0x80023a <angle_offset+0x2>
     d42:	b0 91 3b 02 	lds	r27, 0x023B	; 0x80023b <angle_offset+0x3>
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	9a 83       	std	Y+2, r25	; 0x02
     d4a:	ab 83       	std	Y+3, r26	; 0x03
     d4c:	bc 83       	std	Y+4, r27	; 0x04
     d4e:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <kp_velocity_control>
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	42 d4       	rcall	.+2180   	; 0x15de <__floatsisf>
     d5a:	4b 01       	movw	r8, r22
     d5c:	5c 01       	movw	r10, r24
     d5e:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <motor1_speed_error>
     d62:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <motor1_speed_error+0x1>
     d66:	a0 91 55 02 	lds	r26, 0x0255	; 0x800255 <motor1_speed_error+0x2>
     d6a:	b0 91 56 02 	lds	r27, 0x0256	; 0x800256 <motor1_speed_error+0x3>
     d6e:	8d 83       	std	Y+5, r24	; 0x05
     d70:	9e 83       	std	Y+6, r25	; 0x06
     d72:	af 83       	std	Y+7, r26	; 0x07
     d74:	b8 87       	std	Y+8, r27	; 0x08
     d76:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <kd__velocity_control>
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	2e d4       	rcall	.+2140   	; 0x15de <__floatsisf>
     d82:	6b 01       	movw	r12, r22
     d84:	7c 01       	movw	r14, r24
     d86:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <motor1_speed>
     d8a:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <motor1_speed+0x1>
     d8e:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <motor1_speed+0x2>
     d92:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <motor1_speed+0x3>
     d96:	89 87       	std	Y+9, r24	; 0x09
     d98:	9a 87       	std	Y+10, r25	; 0x0a
     d9a:	ab 87       	std	Y+11, r26	; 0x0b
     d9c:	bc 87       	std	Y+12, r27	; 0x0c
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e4       	ldi	r19, 0x40	; 64
     da2:	4c e9       	ldi	r20, 0x9C	; 156
     da4:	55 e4       	ldi	r21, 0x45	; 69
     da6:	60 91 43 02 	lds	r22, 0x0243	; 0x800243 <integral_motor1_speed_error>
     daa:	70 91 44 02 	lds	r23, 0x0244	; 0x800244 <integral_motor1_speed_error+0x1>
     dae:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <integral_motor1_speed_error+0x2>
     db2:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <integral_motor1_speed_error+0x3>
     db6:	78 d3       	rcall	.+1776   	; 0x14a8 <__divsf3>
     db8:	9b 01       	movw	r18, r22
     dba:	ac 01       	movw	r20, r24
     dbc:	69 81       	ldd	r22, Y+1	; 0x01
     dbe:	7a 81       	ldd	r23, Y+2	; 0x02
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	9c 81       	ldd	r25, Y+4	; 0x04
     dc4:	a7 d2       	rcall	.+1358   	; 0x1314 <__addsf3>
     dc6:	2b 01       	movw	r4, r22
     dc8:	3c 01       	movw	r6, r24
     dca:	2d 81       	ldd	r18, Y+5	; 0x05
     dcc:	3e 81       	ldd	r19, Y+6	; 0x06
     dce:	4f 81       	ldd	r20, Y+7	; 0x07
     dd0:	58 85       	ldd	r21, Y+8	; 0x08
     dd2:	c5 01       	movw	r24, r10
     dd4:	b4 01       	movw	r22, r8
     dd6:	e3 d4       	rcall	.+2502   	; 0x179e <__mulsf3>
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	4a e7       	ldi	r20, 0x7A	; 122
     dde:	54 e4       	ldi	r21, 0x44	; 68
     de0:	63 d3       	rcall	.+1734   	; 0x14a8 <__divsf3>
     de2:	9b 01       	movw	r18, r22
     de4:	ac 01       	movw	r20, r24
     de6:	c3 01       	movw	r24, r6
     de8:	b2 01       	movw	r22, r4
     dea:	94 d2       	rcall	.+1320   	; 0x1314 <__addsf3>
     dec:	2b 01       	movw	r4, r22
     dee:	3c 01       	movw	r6, r24
     df0:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <previous_motor1_speed>
     df4:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <previous_motor1_speed+0x1>
     df8:	40 91 5d 02 	lds	r20, 0x025D	; 0x80025d <previous_motor1_speed+0x2>
     dfc:	50 91 5e 02 	lds	r21, 0x025E	; 0x80025e <previous_motor1_speed+0x3>
     e00:	69 85       	ldd	r22, Y+9	; 0x09
     e02:	7a 85       	ldd	r23, Y+10	; 0x0a
     e04:	8b 85       	ldd	r24, Y+11	; 0x0b
     e06:	9c 85       	ldd	r25, Y+12	; 0x0c
     e08:	84 d2       	rcall	.+1288   	; 0x1312 <__subsf3>
     e0a:	9b 01       	movw	r18, r22
     e0c:	ac 01       	movw	r20, r24
     e0e:	c7 01       	movw	r24, r14
     e10:	b6 01       	movw	r22, r12
     e12:	c5 d4       	rcall	.+2442   	; 0x179e <__mulsf3>
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	4a e7       	ldi	r20, 0x7A	; 122
     e1a:	54 e4       	ldi	r21, 0x44	; 68
     e1c:	45 d3       	rcall	.+1674   	; 0x14a8 <__divsf3>
     e1e:	9b 01       	movw	r18, r22
     e20:	ac 01       	movw	r20, r24
     e22:	c3 01       	movw	r24, r6
     e24:	b2 01       	movw	r22, r4
     e26:	76 d2       	rcall	.+1260   	; 0x1314 <__addsf3>
     e28:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <set_angle1>
     e2c:	70 93 7c 02 	sts	0x027C, r23	; 0x80027c <set_angle1+0x1>
     e30:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <set_angle1+0x2>
     e34:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <set_angle1+0x3>
	//calculate PID output for motor1
	set_angle2=angle_offset+integral_motor2_speed_error/5000.0 + kp_velocity_control*(motor2_speed_error)/1000.0+kd__velocity_control*(motor2_speed-previous_motor2_speed)/1000.0;
     e38:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <motor2_speed_error>
     e3c:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <motor2_speed_error+0x1>
     e40:	a0 91 51 02 	lds	r26, 0x0251	; 0x800251 <motor2_speed_error+0x2>
     e44:	b0 91 52 02 	lds	r27, 0x0252	; 0x800252 <motor2_speed_error+0x3>
     e48:	8d 87       	std	Y+13, r24	; 0x0d
     e4a:	9e 87       	std	Y+14, r25	; 0x0e
     e4c:	af 87       	std	Y+15, r26	; 0x0f
     e4e:	b8 8b       	std	Y+16, r27	; 0x10
     e50:	40 90 5f 02 	lds	r4, 0x025F	; 0x80025f <motor2_speed>
     e54:	50 90 60 02 	lds	r5, 0x0260	; 0x800260 <motor2_speed+0x1>
     e58:	60 90 61 02 	lds	r6, 0x0261	; 0x800261 <motor2_speed+0x2>
     e5c:	70 90 62 02 	lds	r7, 0x0262	; 0x800262 <motor2_speed+0x3>
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e4       	ldi	r19, 0x40	; 64
     e64:	4c e9       	ldi	r20, 0x9C	; 156
     e66:	55 e4       	ldi	r21, 0x45	; 69
     e68:	60 91 3f 02 	lds	r22, 0x023F	; 0x80023f <integral_motor2_speed_error>
     e6c:	70 91 40 02 	lds	r23, 0x0240	; 0x800240 <integral_motor2_speed_error+0x1>
     e70:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <integral_motor2_speed_error+0x2>
     e74:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <integral_motor2_speed_error+0x3>
     e78:	17 d3       	rcall	.+1582   	; 0x14a8 <__divsf3>
     e7a:	9b 01       	movw	r18, r22
     e7c:	ac 01       	movw	r20, r24
     e7e:	69 81       	ldd	r22, Y+1	; 0x01
     e80:	7a 81       	ldd	r23, Y+2	; 0x02
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	9c 81       	ldd	r25, Y+4	; 0x04
     e86:	46 d2       	rcall	.+1164   	; 0x1314 <__addsf3>
     e88:	69 83       	std	Y+1, r22	; 0x01
     e8a:	7a 83       	std	Y+2, r23	; 0x02
     e8c:	8b 83       	std	Y+3, r24	; 0x03
     e8e:	9c 83       	std	Y+4, r25	; 0x04
     e90:	2d 85       	ldd	r18, Y+13	; 0x0d
     e92:	3e 85       	ldd	r19, Y+14	; 0x0e
     e94:	4f 85       	ldd	r20, Y+15	; 0x0f
     e96:	58 89       	ldd	r21, Y+16	; 0x10
     e98:	c5 01       	movw	r24, r10
     e9a:	b4 01       	movw	r22, r8
     e9c:	80 d4       	rcall	.+2304   	; 0x179e <__mulsf3>
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	4a e7       	ldi	r20, 0x7A	; 122
     ea4:	54 e4       	ldi	r21, 0x44	; 68
     ea6:	00 d3       	rcall	.+1536   	; 0x14a8 <__divsf3>
     ea8:	9b 01       	movw	r18, r22
     eaa:	ac 01       	movw	r20, r24
     eac:	69 81       	ldd	r22, Y+1	; 0x01
     eae:	7a 81       	ldd	r23, Y+2	; 0x02
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	9c 81       	ldd	r25, Y+4	; 0x04
     eb4:	2f d2       	rcall	.+1118   	; 0x1314 <__addsf3>
     eb6:	4b 01       	movw	r8, r22
     eb8:	5c 01       	movw	r10, r24
     eba:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <previous_motor2_speed>
     ebe:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <previous_motor2_speed+0x1>
     ec2:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <previous_motor2_speed+0x2>
     ec6:	50 91 5a 02 	lds	r21, 0x025A	; 0x80025a <previous_motor2_speed+0x3>
     eca:	c3 01       	movw	r24, r6
     ecc:	b2 01       	movw	r22, r4
     ece:	21 d2       	rcall	.+1090   	; 0x1312 <__subsf3>
     ed0:	9b 01       	movw	r18, r22
     ed2:	ac 01       	movw	r20, r24
     ed4:	c7 01       	movw	r24, r14
     ed6:	b6 01       	movw	r22, r12
     ed8:	62 d4       	rcall	.+2244   	; 0x179e <__mulsf3>
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	4a e7       	ldi	r20, 0x7A	; 122
     ee0:	54 e4       	ldi	r21, 0x44	; 68
     ee2:	e2 d2       	rcall	.+1476   	; 0x14a8 <__divsf3>
     ee4:	9b 01       	movw	r18, r22
     ee6:	ac 01       	movw	r20, r24
     ee8:	c5 01       	movw	r24, r10
     eea:	b4 01       	movw	r22, r8
     eec:	13 d2       	rcall	.+1062   	; 0x1314 <__addsf3>
     eee:	60 93 77 02 	sts	0x0277, r22	; 0x800277 <set_angle2>
     ef2:	70 93 78 02 	sts	0x0278, r23	; 0x800278 <set_angle2+0x1>
     ef6:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <set_angle2+0x2>
     efa:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <set_angle2+0x3>
	//calculate PID output for motor1
	previous_count1=count1;		//set previous_count1 as present count1
     efe:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <count1>
     f02:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <count1+0x1>
     f06:	a0 91 75 02 	lds	r26, 0x0275	; 0x800275 <count1+0x2>
     f0a:	b0 91 76 02 	lds	r27, 0x0276	; 0x800276 <count1+0x3>
     f0e:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <previous_count1>
     f12:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <previous_count1+0x1>
     f16:	a0 93 71 02 	sts	0x0271, r26	; 0x800271 <previous_count1+0x2>
     f1a:	b0 93 72 02 	sts	0x0272, r27	; 0x800272 <previous_count1+0x3>
	previous_count2=count2;		//set previous_count2 as present count2
     f1e:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <count2>
     f22:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <count2+0x1>
     f26:	a0 91 6d 02 	lds	r26, 0x026D	; 0x80026d <count2+0x2>
     f2a:	b0 91 6e 02 	lds	r27, 0x026E	; 0x80026e <count2+0x3>
     f2e:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <previous_count2>
     f32:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <previous_count2+0x1>
     f36:	a0 93 69 02 	sts	0x0269, r26	; 0x800269 <previous_count2+0x2>
     f3a:	b0 93 6a 02 	sts	0x026A, r27	; 0x80026a <previous_count2+0x3>
	previous_motor1_speed_error=motor1_speed_error; //set previous_motor1_speed error as present motor1 speed error
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	af 81       	ldd	r26, Y+7	; 0x07
     f44:	b8 85       	ldd	r27, Y+8	; 0x08
     f46:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <previous_motor1_speed_error>
     f4a:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <previous_motor1_speed_error+0x1>
     f4e:	a0 93 4d 02 	sts	0x024D, r26	; 0x80024d <previous_motor1_speed_error+0x2>
     f52:	b0 93 4e 02 	sts	0x024E, r27	; 0x80024e <previous_motor1_speed_error+0x3>
	previous_motor2_speed_error=motor2_speed_error;	//set previous_motor2_speed error as present motor2 speed error
     f56:	8d 85       	ldd	r24, Y+13	; 0x0d
     f58:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5a:	af 85       	ldd	r26, Y+15	; 0x0f
     f5c:	b8 89       	ldd	r27, Y+16	; 0x10
     f5e:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <previous_motor2_speed_error>
     f62:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <previous_motor2_speed_error+0x1>
     f66:	a0 93 49 02 	sts	0x0249, r26	; 0x800249 <previous_motor2_speed_error+0x2>
     f6a:	b0 93 4a 02 	sts	0x024A, r27	; 0x80024a <previous_motor2_speed_error+0x3>
	previous_motor1_speed=motor1_speed;				//set previous_motor1_speed as present motor1 speed
     f6e:	89 85       	ldd	r24, Y+9	; 0x09
     f70:	9a 85       	ldd	r25, Y+10	; 0x0a
     f72:	ab 85       	ldd	r26, Y+11	; 0x0b
     f74:	bc 85       	ldd	r27, Y+12	; 0x0c
     f76:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <previous_motor1_speed>
     f7a:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <previous_motor1_speed+0x1>
     f7e:	a0 93 5d 02 	sts	0x025D, r26	; 0x80025d <previous_motor1_speed+0x2>
     f82:	b0 93 5e 02 	sts	0x025E, r27	; 0x80025e <previous_motor1_speed+0x3>
	previous_motor2_speed=motor2_speed;				//set previous_motor2_speed as present motor2 speed
     f86:	40 92 57 02 	sts	0x0257, r4	; 0x800257 <previous_motor2_speed>
     f8a:	50 92 58 02 	sts	0x0258, r5	; 0x800258 <previous_motor2_speed+0x1>
     f8e:	60 92 59 02 	sts	0x0259, r6	; 0x800259 <previous_motor2_speed+0x2>
     f92:	70 92 5a 02 	sts	0x025A, r7	; 0x80025a <previous_motor2_speed+0x3>
}
     f96:	60 96       	adiw	r28, 0x10	; 16
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	ff 90       	pop	r15
     fac:	ef 90       	pop	r14
     fae:	df 90       	pop	r13
     fb0:	cf 90       	pop	r12
     fb2:	bf 90       	pop	r11
     fb4:	af 90       	pop	r10
     fb6:	9f 90       	pop	r9
     fb8:	8f 90       	pop	r8
     fba:	7f 90       	pop	r7
     fbc:	6f 90       	pop	r6
     fbe:	5f 90       	pop	r5
     fc0:	4f 90       	pop	r4
     fc2:	08 95       	ret

00000fc4 <_Z9buzzer_onv>:
? * Example Call: buzzer_on();
? */

void buzzer_on()
{
	PORTF&=0xFE;
     fc4:	88 98       	cbi	0x11, 0	; 17
     fc6:	08 95       	ret

00000fc8 <_Z10buzzer_offv>:
? * Logic: set PF0 to high
? * Example Call: buzzer_off();
? */
void buzzer_off()
{
	PORTF|=0x01;
     fc8:	88 9a       	sbi	0x11, 0	; 17
     fca:	08 95       	ret

00000fcc <_Z10reset_pidsv>:
? * Example Call: reset_pids();
? */

void reset_pids()
{
	integral_tilt_angle1_error=0;
     fcc:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <integral_tilt_angle1_error>
     fd0:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <integral_tilt_angle1_error+0x1>
     fd4:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <integral_tilt_angle1_error+0x2>
     fd8:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <integral_tilt_angle1_error+0x3>
	integral_tilt_angle2_error=0;
     fdc:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <integral_tilt_angle2_error>
     fe0:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <integral_tilt_angle2_error+0x1>
     fe4:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <integral_tilt_angle2_error+0x2>
     fe8:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <integral_tilt_angle2_error+0x3>
	integral_motor1_speed_error=tilt_angle;
     fec:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <tilt_angle>
     ff0:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <tilt_angle+0x1>
     ff4:	a0 91 a5 02 	lds	r26, 0x02A5	; 0x8002a5 <tilt_angle+0x2>
     ff8:	b0 91 a6 02 	lds	r27, 0x02A6	; 0x8002a6 <tilt_angle+0x3>
     ffc:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <integral_motor1_speed_error>
    1000:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <integral_motor1_speed_error+0x1>
    1004:	a0 93 45 02 	sts	0x0245, r26	; 0x800245 <integral_motor1_speed_error+0x2>
    1008:	b0 93 46 02 	sts	0x0246, r27	; 0x800246 <integral_motor1_speed_error+0x3>
	integral_motor2_speed_error=tilt_angle;
    100c:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <integral_motor2_speed_error>
    1010:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <integral_motor2_speed_error+0x1>
    1014:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <integral_motor2_speed_error+0x2>
    1018:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <integral_motor2_speed_error+0x3>
	previous_motor1_speed=0;
    101c:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <previous_motor1_speed>
    1020:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <previous_motor1_speed+0x1>
    1024:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <previous_motor1_speed+0x2>
    1028:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <previous_motor1_speed+0x3>
	previous_motor2_speed=0;
    102c:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <previous_motor2_speed>
    1030:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <previous_motor2_speed+0x1>
    1034:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <previous_motor2_speed+0x2>
    1038:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <previous_motor2_speed+0x3>
	previous_count1=0;
    103c:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <previous_count1>
    1040:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <previous_count1+0x1>
    1044:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <previous_count1+0x2>
    1048:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <previous_count1+0x3>
	previous_count2=0;
    104c:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <previous_count2>
    1050:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <previous_count2+0x1>
    1054:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <previous_count2+0x2>
    1058:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <previous_count2+0x3>
	count1=0;
    105c:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <count1>
    1060:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <count1+0x1>
    1064:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <count1+0x2>
    1068:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <count1+0x3>
	count2=0;
    106c:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <count2>
    1070:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <count2+0x1>
    1074:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <count2+0x2>
    1078:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <count2+0x3>
	previous_tilt_angle=tilt_angle;
    107c:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <previous_tilt_angle>
    1080:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <previous_tilt_angle+0x1>
    1084:	a0 93 81 02 	sts	0x0281, r26	; 0x800281 <previous_tilt_angle+0x2>
    1088:	b0 93 82 02 	sts	0x0282, r27	; 0x800282 <previous_tilt_angle+0x3>
    108c:	08 95       	ret

0000108e <_Z21receive_joystick_datav>:
? * Example Call: receive_joystick_data();
? */
float previous_rotational_velocity=0,present_rotational_velocity=0;
float previous_translational_velocity=0,present_translational_velocity=0;
void receive_joystick_data()
{	int i=0,m;
    108e:	8f 92       	push	r8
    1090:	9f 92       	push	r9
    1092:	af 92       	push	r10
    1094:	bf 92       	push	r11
    1096:	cf 92       	push	r12
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
	UINT8 a=0,b=0;
	float x;
	while(Serial.read()!=0x7E); 			//read from buffer until 0x7E
    10a6:	8d ea       	ldi	r24, 0xAD	; 173
    10a8:	92 e0       	ldi	r25, 0x02	; 2
    10aa:	f9 d3       	rcall	.+2034   	; 0x189e <_ZN14HardwareSerial4readEv>
    10ac:	8e 37       	cpi	r24, 0x7E	; 126
    10ae:	91 05       	cpc	r25, r1
    10b0:	d1 f7       	brne	.-12     	; 0x10a6 <_Z21receive_joystick_datav+0x18>
    10b2:	89 e0       	ldi	r24, 0x09	; 9
    10b4:	e8 2e       	mov	r14, r24
    10b6:	f1 2c       	mov	r15, r1
		for(i=1;i<=9;i++)				//discard 11 bytes
		Serial.read();	
    10b8:	8d ea       	ldi	r24, 0xAD	; 173
    10ba:	92 e0       	ldi	r25, 0x02	; 2
    10bc:	f0 d3       	rcall	.+2016   	; 0x189e <_ZN14HardwareSerial4readEv>
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	e8 1a       	sub	r14, r24
    10c2:	f1 08       	sbc	r15, r1
void receive_joystick_data()
{	int i=0,m;
	UINT8 a=0,b=0;
	float x;
	while(Serial.read()!=0x7E); 			//read from buffer until 0x7E
		for(i=1;i<=9;i++)				//discard 11 bytes
    10c4:	c9 f7       	brne	.-14     	; 0x10b8 <_Z21receive_joystick_datav+0x2a>
		Serial.read();	
		a=Serial.read();
    10c6:	8d ea       	ldi	r24, 0xAD	; 173
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	e9 d3       	rcall	.+2002   	; 0x189e <_ZN14HardwareSerial4readEv>
    10cc:	f8 2e       	mov	r15, r24
		b=Serial.read();
    10ce:	8d ea       	ldi	r24, 0xAD	; 173
    10d0:	92 e0       	ldi	r25, 0x02	; 2
    10d2:	e5 d3       	rcall	.+1994   	; 0x189e <_ZN14HardwareSerial4readEv>
		if(a==12 && b==0){
    10d4:	9c e0       	ldi	r25, 0x0C	; 12
    10d6:	f9 12       	cpse	r15, r25
    10d8:	b4 c0       	rjmp	.+360    	; 0x1242 <_Z21receive_joystick_datav+0x1b4>
    10da:	81 11       	cpse	r24, r1
    10dc:	b2 c0       	rjmp	.+356    	; 0x1242 <_Z21receive_joystick_datav+0x1b4>
		a=Serial.read();
    10de:	8d ea       	ldi	r24, 0xAD	; 173
    10e0:	92 e0       	ldi	r25, 0x02	; 2
    10e2:	dd d3       	rcall	.+1978   	; 0x189e <_ZN14HardwareSerial4readEv>
    10e4:	f8 2e       	mov	r15, r24
    10e6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
		if(a&4)			//change buzzer state according to switch on joystick
    10ea:	f2 fe       	sbrs	r15, 2
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <_Z21receive_joystick_datav+0x6e>
		{
			if(prbzr==1) 
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <_Z21receive_joystick_datav+0x66>
			{buzzer_off();}	
    10f2:	6a df       	rcall	.-300    	; 0xfc8 <_Z10buzzer_offv>
			prbzr=1;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    10fa:	05 c0       	rjmp	.+10     	; 0x1106 <_Z21receive_joystick_datav+0x78>
		}
		else{
			if(prbzr==0)
    10fc:	81 11       	cpse	r24, r1
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <_Z21receive_joystick_datav+0x74>
		{buzzer_on();}
    1100:	61 df       	rcall	.-318    	; 0xfc4 <_Z9buzzer_onv>
		prbzr=0;			
    1102:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
		}
		if(a&8)
    1106:	f3 fe       	sbrs	r15, 3
    1108:	05 c0       	rjmp	.+10     	; 0x1114 <_Z21receive_joystick_datav+0x86>
		{
			kp_velocity_control=26;
    110a:	8a e1       	ldi	r24, 0x1A	; 26
    110c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <kp_velocity_control>
			ki_velocity_control=53;
    1110:	85 e3       	ldi	r24, 0x35	; 53
    1112:	04 c0       	rjmp	.+8      	; 0x111c <_Z21receive_joystick_datav+0x8e>
		}
		else
		{
			kp_velocity_control=53;
    1114:	85 e3       	ldi	r24, 0x35	; 53
    1116:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <kp_velocity_control>
			ki_velocity_control=16;
    111a:	80 e1       	ldi	r24, 0x10	; 16
    111c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <ki_velocity_control>
		}
		a=Serial.read();		//read byte
    1120:	8d ea       	ldi	r24, 0xAD	; 173
    1122:	92 e0       	ldi	r25, 0x02	; 2
    1124:	bc d3       	rcall	.+1912   	; 0x189e <_ZN14HardwareSerial4readEv>
    1126:	f8 2e       	mov	r15, r24
		b=Serial.read();		//read byte
    1128:	8d ea       	ldi	r24, 0xAD	; 173
    112a:	92 e0       	ldi	r25, 0x02	; 2
    112c:	b8 d3       	rcall	.+1904   	; 0x189e <_ZN14HardwareSerial4readEv>
		x=(a<<8)|b;				//concatenate above 2
    112e:	1f 2d       	mov	r17, r15
    1130:	00 e0       	ldi	r16, 0x00	; 0
    1132:	b8 01       	movw	r22, r16
    1134:	68 2b       	or	r22, r24
    1136:	07 2e       	mov	r0, r23
    1138:	00 0c       	add	r0, r0
    113a:	88 0b       	sbc	r24, r24
    113c:	99 0b       	sbc	r25, r25
    113e:	4f d2       	rcall	.+1182   	; 0x15de <__floatsisf>
		present_translational_velocity=(.116630*x -64.31);		//convert to equivalent translational velocity
    1140:	26 eb       	ldi	r18, 0xB6	; 182
    1142:	3b ed       	ldi	r19, 0xDB	; 219
    1144:	4e ee       	ldi	r20, 0xEE	; 238
    1146:	5d e3       	ldi	r21, 0x3D	; 61
    1148:	2a d3       	rcall	.+1620   	; 0x179e <__mulsf3>
    114a:	28 eb       	ldi	r18, 0xB8	; 184
    114c:	3e e9       	ldi	r19, 0x9E	; 158
    114e:	40 e8       	ldi	r20, 0x80	; 128
    1150:	52 e4       	ldi	r21, 0x42	; 66
    1152:	df d0       	rcall	.+446    	; 0x1312 <__subsf3>
    1154:	6b 01       	movw	r12, r22
    1156:	7c 01       	movw	r14, r24
    1158:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <__data_end>
    115c:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <__data_end+0x1>
    1160:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <__data_end+0x2>
    1164:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <__data_end+0x3>
		if(present_translational_velocity==previous_translational_velocity)
    1168:	80 90 2c 02 	lds	r8, 0x022C	; 0x80022c <previous_translational_velocity>
    116c:	90 90 2d 02 	lds	r9, 0x022D	; 0x80022d <previous_translational_velocity+0x1>
    1170:	a0 90 2e 02 	lds	r10, 0x022E	; 0x80022e <previous_translational_velocity+0x2>
    1174:	b0 90 2f 02 	lds	r11, 0x022F	; 0x80022f <previous_translational_velocity+0x3>
    1178:	a5 01       	movw	r20, r10
    117a:	94 01       	movw	r18, r8
    117c:	91 d1       	rcall	.+802    	; 0x14a0 <__cmpsf2>
    117e:	81 11       	cpse	r24, r1
    1180:	05 c0       	rjmp	.+10     	; 0x118c <_Z21receive_joystick_datav+0xfe>
		translational_velocity=previous_translational_velocity;
    1182:	c5 01       	movw	r24, r10
    1184:	b4 01       	movw	r22, r8
    1186:	f8 d1       	rcall	.+1008   	; 0x1578 <__fixsfsi>
    1188:	60 93 3d 02 	sts	0x023D, r22	; 0x80023d <translational_velocity>
		previous_translational_velocity=present_translational_velocity;
    118c:	c0 92 2c 02 	sts	0x022C, r12	; 0x80022c <previous_translational_velocity>
    1190:	d0 92 2d 02 	sts	0x022D, r13	; 0x80022d <previous_translational_velocity+0x1>
    1194:	e0 92 2e 02 	sts	0x022E, r14	; 0x80022e <previous_translational_velocity+0x2>
    1198:	f0 92 2f 02 	sts	0x022F, r15	; 0x80022f <previous_translational_velocity+0x3>

		a=Serial.read();		//read byte
    119c:	8d ea       	ldi	r24, 0xAD	; 173
    119e:	92 e0       	ldi	r25, 0x02	; 2
    11a0:	7e d3       	rcall	.+1788   	; 0x189e <_ZN14HardwareSerial4readEv>
    11a2:	18 2f       	mov	r17, r24
		b=Serial.read();		//read byte
    11a4:	8d ea       	ldi	r24, 0xAD	; 173
    11a6:	92 e0       	ldi	r25, 0x02	; 2
    11a8:	7a d3       	rcall	.+1780   	; 0x189e <_ZN14HardwareSerial4readEv>
		x=(a<<8)|b;				//concatenate above 2
    11aa:	d1 2f       	mov	r29, r17
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	c9 2f       	mov	r28, r25
    11b0:	be 01       	movw	r22, r28
    11b2:	68 2b       	or	r22, r24
    11b4:	07 2e       	mov	r0, r23
    11b6:	00 0c       	add	r0, r0
    11b8:	88 0b       	sbc	r24, r24
    11ba:	99 0b       	sbc	r25, r25
    11bc:	10 d2       	rcall	.+1056   	; 0x15de <__floatsisf>
		present_rotational_velocity=.5*(.116630*x -65.31);	//convert to equivalent rotational velocity
    11be:	26 eb       	ldi	r18, 0xB6	; 182
    11c0:	3b ed       	ldi	r19, 0xDB	; 219
    11c2:	4e ee       	ldi	r20, 0xEE	; 238
    11c4:	5d e3       	ldi	r21, 0x3D	; 61
    11c6:	eb d2       	rcall	.+1494   	; 0x179e <__mulsf3>
    11c8:	28 eb       	ldi	r18, 0xB8	; 184
    11ca:	3e e9       	ldi	r19, 0x9E	; 158
    11cc:	42 e8       	ldi	r20, 0x82	; 130
    11ce:	52 e4       	ldi	r21, 0x42	; 66
    11d0:	a0 d0       	rcall	.+320    	; 0x1312 <__subsf3>
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	5f e3       	ldi	r21, 0x3F	; 63
    11da:	e1 d2       	rcall	.+1474   	; 0x179e <__mulsf3>
    11dc:	6b 01       	movw	r12, r22
    11de:	7c 01       	movw	r14, r24
    11e0:	60 93 30 02 	sts	0x0230, r22	; 0x800230 <present_rotational_velocity>
    11e4:	70 93 31 02 	sts	0x0231, r23	; 0x800231 <present_rotational_velocity+0x1>
    11e8:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <present_rotational_velocity+0x2>
    11ec:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <present_rotational_velocity+0x3>
		if(previous_rotational_velocity==present_rotational_velocity)
    11f0:	9b 01       	movw	r18, r22
    11f2:	ac 01       	movw	r20, r24
    11f4:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <previous_rotational_velocity>
    11f8:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <previous_rotational_velocity+0x1>
    11fc:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <previous_rotational_velocity+0x2>
    1200:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <previous_rotational_velocity+0x3>
    1204:	4d d1       	rcall	.+666    	; 0x14a0 <__cmpsf2>
    1206:	81 11       	cpse	r24, r1
    1208:	05 c0       	rjmp	.+10     	; 0x1214 <_Z21receive_joystick_datav+0x186>
		rotational_velocity=present_rotational_velocity;
    120a:	c7 01       	movw	r24, r14
    120c:	b6 01       	movw	r22, r12
    120e:	b4 d1       	rcall	.+872    	; 0x1578 <__fixsfsi>
    1210:	60 93 3e 02 	sts	0x023E, r22	; 0x80023e <rotational_velocity>
		previous_rotational_velocity=present_rotational_velocity;
    1214:	c0 92 34 02 	sts	0x0234, r12	; 0x800234 <previous_rotational_velocity>
    1218:	d0 92 35 02 	sts	0x0235, r13	; 0x800235 <previous_rotational_velocity+0x1>
    121c:	e0 92 36 02 	sts	0x0236, r14	; 0x800236 <previous_rotational_velocity+0x2>
    1220:	f0 92 37 02 	sts	0x0237, r15	; 0x800237 <previous_rotational_velocity+0x3>
		Serial.read();				//discard 1 byte
    1224:	8d ea       	ldi	r24, 0xAD	; 173
    1226:	92 e0       	ldi	r25, 0x02	; 2
		else
		{
			for(i=0;i<=6;i++)
			Serial.read();
		}
}
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	8f 90       	pop	r8
		x=(a<<8)|b;				//concatenate above 2
		present_rotational_velocity=.5*(.116630*x -65.31);	//convert to equivalent rotational velocity
		if(previous_rotational_velocity==present_rotational_velocity)
		rotational_velocity=present_rotational_velocity;
		previous_rotational_velocity=present_rotational_velocity;
		Serial.read();				//discard 1 byte
    1240:	2e c3       	rjmp	.+1628   	; 0x189e <_ZN14HardwareSerial4readEv>
    1242:	c7 e0       	ldi	r28, 0x07	; 7
    1244:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else
		{
			for(i=0;i<=6;i++)
			Serial.read();
    1246:	8d ea       	ldi	r24, 0xAD	; 173
    1248:	92 e0       	ldi	r25, 0x02	; 2
    124a:	29 d3       	rcall	.+1618   	; 0x189e <_ZN14HardwareSerial4readEv>
    124c:	21 97       	sbiw	r28, 0x01	; 1
		previous_rotational_velocity=present_rotational_velocity;
		Serial.read();				//discard 1 byte
		}
		else
		{
			for(i=0;i<=6;i++)
    124e:	d9 f7       	brne	.-10     	; 0x1246 <_Z21receive_joystick_datav+0x1b8>
			Serial.read();
		}
}
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	df 90       	pop	r13
    125e:	cf 90       	pop	r12
    1260:	bf 90       	pop	r11
    1262:	af 90       	pop	r10
    1264:	9f 90       	pop	r9
    1266:	8f 90       	pop	r8
    1268:	08 95       	ret

0000126a <main>:
? * Example Call: Called automatically by system
? */

int main()
{	
	init_devices();		//initialize devices
    126a:	60 d9       	rcall	.-3392   	; 0x52c <_Z12init_devicesv>
	uart1_init();
    126c:	f6 d8       	rcall	.-3604   	; 0x45a <_Z10uart1_initv>
	long present_time=0;	//for noting present time
	long previous_tilt_angle_update=0;				//for storing previous tilt angle update time
	long previous_rx_time=0;
	stop_b();
    126e:	55 d9       	rcall	.-3414   	; 0x51a <_Z6stop_bv>
    1270:	26 e0       	ldi	r18, 0x06	; 6
    1272:	40 e8       	ldi	r20, 0x80	; 128
    1274:	55 e2       	ldi	r21, 0x25	; 37
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	8a e4       	ldi	r24, 0x4A	; 74
    127c:	93 e0       	ldi	r25, 0x03	; 3
    127e:	ab d3       	rcall	.+1878   	; 0x19d6 <_ZN14HardwareSerial5beginEmh>
{	
	init_devices();		//initialize devices
	uart1_init();
	long present_time=0;	//for noting present time
	long previous_tilt_angle_update=0;				//for storing previous tilt angle update time
	long previous_rx_time=0;
    1280:	41 2c       	mov	r4, r1
    1282:	51 2c       	mov	r5, r1
    1284:	32 01       	movw	r6, r4
int main()
{	
	init_devices();		//initialize devices
	uart1_init();
	long present_time=0;	//for noting present time
	long previous_tilt_angle_update=0;				//for storing previous tilt angle update time
    1286:	81 2c       	mov	r8, r1
    1288:	91 2c       	mov	r9, r1
    128a:	54 01       	movw	r10, r8
		
		if ((present_time-previous_tilt_angle_update)>=50)			//after every 50ms
		{	
			PCICR=0x00;				//disable encoder interrupt 2
			tilt_angles_update();			//update tilt angles
			PCICR=0x04;	//enables Pin Change Interrupt 2
    128c:	c4 e0       	ldi	r28, 0x04	; 4
	//uart_tx(set_angle);
	Serial1.begin(9600);
	char temp;
    while(1) 
		{
		present_time = epoch();						// get present time
    128e:	19 da       	rcall	.-3022   	; 0x6c2 <_Z5epochv>
    1290:	6b 01       	movw	r12, r22
    1292:	7c 01       	movw	r14, r24
		
		if ((present_time-previous_tilt_angle_update)>=50)			//after every 50ms
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	88 19       	sub	r24, r8
    129a:	99 09       	sbc	r25, r9
    129c:	aa 09       	sbc	r26, r10
    129e:	bb 09       	sbc	r27, r11
    12a0:	c2 97       	sbiw	r24, 0x32	; 50
    12a2:	a1 05       	cpc	r26, r1
    12a4:	b1 05       	cpc	r27, r1
    12a6:	f4 f0       	brlt	.+60     	; 0x12e4 <main+0x7a>
		{	
			PCICR=0x00;				//disable encoder interrupt 2
    12a8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
			tilt_angles_update();			//update tilt angles
    12ac:	16 da       	rcall	.-3028   	; 0x6da <_Z18tilt_angles_updatev>
			PCICR=0x04;	//enables Pin Change Interrupt 2
    12ae:	c0 93 68 00 	sts	0x0068, r28	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
			previous_tilt_angle_update=present_time;		//Previous tilt angle is now present tilt angle
			if(fabs(tilt_angle) > 45)				//if absolute value of tilt angle is greater than 45 than stop bot and reset PID
    12b2:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <tilt_angle>
    12b6:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <tilt_angle+0x1>
    12ba:	a0 91 a5 02 	lds	r26, 0x02A5	; 0x8002a5 <tilt_angle+0x2>
    12be:	b0 91 a6 02 	lds	r27, 0x02A6	; 0x8002a6 <tilt_angle+0x3>
    12c2:	bc 01       	movw	r22, r24
    12c4:	cd 01       	movw	r24, r26
    12c6:	9f 77       	andi	r25, 0x7F	; 127
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	44 e3       	ldi	r20, 0x34	; 52
    12ce:	52 e4       	ldi	r21, 0x42	; 66
    12d0:	5b d2       	rcall	.+1206   	; 0x1788 <__gesf2>
    12d2:	18 16       	cp	r1, r24
    12d4:	1c f4       	brge	.+6      	; 0x12dc <main+0x72>
			{
				stop_b();			//stop bot
    12d6:	21 d9       	rcall	.-3518   	; 0x51a <_Z6stop_bv>
				reset_pids();		//reset pid values
    12d8:	79 de       	rcall	.-782    	; 0xfcc <_Z10reset_pidsv>
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <main+0x76>
			}
			else 					//otherwise
			{
				pid_velocity();			//call	PID controller for velocity		
    12dc:	47 dc       	rcall	.-1906   	; 0xb6c <_Z12pid_velocityv>
				pid_angle();		//call PID controller for angle 
    12de:	d9 da       	rcall	.-2638   	; 0x892 <_Z9pid_anglev>
		if ((present_time-previous_tilt_angle_update)>=50)			//after every 50ms
		{	
			PCICR=0x00;				//disable encoder interrupt 2
			tilt_angles_update();			//update tilt angles
			PCICR=0x04;	//enables Pin Change Interrupt 2
			previous_tilt_angle_update=present_time;		//Previous tilt angle is now present tilt angle
    12e0:	46 01       	movw	r8, r12
    12e2:	57 01       	movw	r10, r14
			{
				pid_velocity();			//call	PID controller for velocity		
				pid_angle();		//call PID controller for angle 
			}
		}
		if( (present_time-previous_rx_time)>=80)	//after every 80ms
    12e4:	d7 01       	movw	r26, r14
    12e6:	c6 01       	movw	r24, r12
    12e8:	84 19       	sub	r24, r4
    12ea:	95 09       	sbc	r25, r5
    12ec:	a6 09       	sbc	r26, r6
    12ee:	b7 09       	sbc	r27, r7
    12f0:	80 35       	cpi	r24, 0x50	; 80
    12f2:	91 05       	cpc	r25, r1
    12f4:	a1 05       	cpc	r26, r1
    12f6:	b1 05       	cpc	r27, r1
    12f8:	2c f4       	brge	.+10     	; 0x1304 <main+0x9a>
    12fa:	73 01       	movw	r14, r6
    12fc:	62 01       	movw	r12, r4
    12fe:	26 01       	movw	r4, r12
    1300:	37 01       	movw	r6, r14
    1302:	c5 cf       	rjmp	.-118    	; 0x128e <main+0x24>
		{	
			
			if(Serial.available()>=18){				//if data in buffer is greater than 18 bytes then
    1304:	8d ea       	ldi	r24, 0xAD	; 173
    1306:	92 e0       	ldi	r25, 0x02	; 2
    1308:	b0 d2       	rcall	.+1376   	; 0x186a <_ZN14HardwareSerial9availableEv>
    130a:	42 97       	sbiw	r24, 0x12	; 18
    130c:	c4 f3       	brlt	.-16     	; 0x12fe <main+0x94>
			receive_joystick_data();				//receive joystick data
    130e:	bf de       	rcall	.-642    	; 0x108e <_Z21receive_joystick_datav>
    1310:	f6 cf       	rjmp	.-20     	; 0x12fe <main+0x94>

00001312 <__subsf3>:
    1312:	50 58       	subi	r21, 0x80	; 128

00001314 <__addsf3>:
    1314:	bb 27       	eor	r27, r27
    1316:	aa 27       	eor	r26, r26
    1318:	0e d0       	rcall	.+28     	; 0x1336 <__addsf3x>
    131a:	fc c1       	rjmp	.+1016   	; 0x1714 <__fp_round>
    131c:	ed d1       	rcall	.+986    	; 0x16f8 <__fp_pscA>
    131e:	30 f0       	brcs	.+12     	; 0x132c <__addsf3+0x18>
    1320:	f2 d1       	rcall	.+996    	; 0x1706 <__fp_pscB>
    1322:	20 f0       	brcs	.+8      	; 0x132c <__addsf3+0x18>
    1324:	31 f4       	brne	.+12     	; 0x1332 <__addsf3+0x1e>
    1326:	9f 3f       	cpi	r25, 0xFF	; 255
    1328:	11 f4       	brne	.+4      	; 0x132e <__addsf3+0x1a>
    132a:	1e f4       	brtc	.+6      	; 0x1332 <__addsf3+0x1e>
    132c:	bd c1       	rjmp	.+890    	; 0x16a8 <__fp_nan>
    132e:	0e f4       	brtc	.+2      	; 0x1332 <__addsf3+0x1e>
    1330:	e0 95       	com	r30
    1332:	e7 fb       	bst	r30, 7
    1334:	b3 c1       	rjmp	.+870    	; 0x169c <__fp_inf>

00001336 <__addsf3x>:
    1336:	e9 2f       	mov	r30, r25
    1338:	fe d1       	rcall	.+1020   	; 0x1736 <__fp_split3>
    133a:	80 f3       	brcs	.-32     	; 0x131c <__addsf3+0x8>
    133c:	ba 17       	cp	r27, r26
    133e:	62 07       	cpc	r22, r18
    1340:	73 07       	cpc	r23, r19
    1342:	84 07       	cpc	r24, r20
    1344:	95 07       	cpc	r25, r21
    1346:	18 f0       	brcs	.+6      	; 0x134e <__addsf3x+0x18>
    1348:	71 f4       	brne	.+28     	; 0x1366 <__addsf3x+0x30>
    134a:	9e f5       	brtc	.+102    	; 0x13b2 <__addsf3x+0x7c>
    134c:	16 c2       	rjmp	.+1068   	; 0x177a <__fp_zero>
    134e:	0e f4       	brtc	.+2      	; 0x1352 <__addsf3x+0x1c>
    1350:	e0 95       	com	r30
    1352:	0b 2e       	mov	r0, r27
    1354:	ba 2f       	mov	r27, r26
    1356:	a0 2d       	mov	r26, r0
    1358:	0b 01       	movw	r0, r22
    135a:	b9 01       	movw	r22, r18
    135c:	90 01       	movw	r18, r0
    135e:	0c 01       	movw	r0, r24
    1360:	ca 01       	movw	r24, r20
    1362:	a0 01       	movw	r20, r0
    1364:	11 24       	eor	r1, r1
    1366:	ff 27       	eor	r31, r31
    1368:	59 1b       	sub	r21, r25
    136a:	99 f0       	breq	.+38     	; 0x1392 <__addsf3x+0x5c>
    136c:	59 3f       	cpi	r21, 0xF9	; 249
    136e:	50 f4       	brcc	.+20     	; 0x1384 <__addsf3x+0x4e>
    1370:	50 3e       	cpi	r21, 0xE0	; 224
    1372:	68 f1       	brcs	.+90     	; 0x13ce <__addsf3x+0x98>
    1374:	1a 16       	cp	r1, r26
    1376:	f0 40       	sbci	r31, 0x00	; 0
    1378:	a2 2f       	mov	r26, r18
    137a:	23 2f       	mov	r18, r19
    137c:	34 2f       	mov	r19, r20
    137e:	44 27       	eor	r20, r20
    1380:	58 5f       	subi	r21, 0xF8	; 248
    1382:	f3 cf       	rjmp	.-26     	; 0x136a <__addsf3x+0x34>
    1384:	46 95       	lsr	r20
    1386:	37 95       	ror	r19
    1388:	27 95       	ror	r18
    138a:	a7 95       	ror	r26
    138c:	f0 40       	sbci	r31, 0x00	; 0
    138e:	53 95       	inc	r21
    1390:	c9 f7       	brne	.-14     	; 0x1384 <__addsf3x+0x4e>
    1392:	7e f4       	brtc	.+30     	; 0x13b2 <__addsf3x+0x7c>
    1394:	1f 16       	cp	r1, r31
    1396:	ba 0b       	sbc	r27, r26
    1398:	62 0b       	sbc	r22, r18
    139a:	73 0b       	sbc	r23, r19
    139c:	84 0b       	sbc	r24, r20
    139e:	ba f0       	brmi	.+46     	; 0x13ce <__addsf3x+0x98>
    13a0:	91 50       	subi	r25, 0x01	; 1
    13a2:	a1 f0       	breq	.+40     	; 0x13cc <__addsf3x+0x96>
    13a4:	ff 0f       	add	r31, r31
    13a6:	bb 1f       	adc	r27, r27
    13a8:	66 1f       	adc	r22, r22
    13aa:	77 1f       	adc	r23, r23
    13ac:	88 1f       	adc	r24, r24
    13ae:	c2 f7       	brpl	.-16     	; 0x13a0 <__addsf3x+0x6a>
    13b0:	0e c0       	rjmp	.+28     	; 0x13ce <__addsf3x+0x98>
    13b2:	ba 0f       	add	r27, r26
    13b4:	62 1f       	adc	r22, r18
    13b6:	73 1f       	adc	r23, r19
    13b8:	84 1f       	adc	r24, r20
    13ba:	48 f4       	brcc	.+18     	; 0x13ce <__addsf3x+0x98>
    13bc:	87 95       	ror	r24
    13be:	77 95       	ror	r23
    13c0:	67 95       	ror	r22
    13c2:	b7 95       	ror	r27
    13c4:	f7 95       	ror	r31
    13c6:	9e 3f       	cpi	r25, 0xFE	; 254
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <__addsf3x+0x96>
    13ca:	b3 cf       	rjmp	.-154    	; 0x1332 <__addsf3+0x1e>
    13cc:	93 95       	inc	r25
    13ce:	88 0f       	add	r24, r24
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <__addsf3x+0x9e>
    13d2:	99 27       	eor	r25, r25
    13d4:	ee 0f       	add	r30, r30
    13d6:	97 95       	ror	r25
    13d8:	87 95       	ror	r24
    13da:	08 95       	ret
    13dc:	8d d1       	rcall	.+794    	; 0x16f8 <__fp_pscA>
    13de:	58 f0       	brcs	.+22     	; 0x13f6 <__addsf3x+0xc0>
    13e0:	80 e8       	ldi	r24, 0x80	; 128
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <__addsf3x+0xb2>
    13e6:	9e ef       	ldi	r25, 0xFE	; 254
    13e8:	8e d1       	rcall	.+796    	; 0x1706 <__fp_pscB>
    13ea:	28 f0       	brcs	.+10     	; 0x13f6 <__addsf3x+0xc0>
    13ec:	40 e8       	ldi	r20, 0x80	; 128
    13ee:	51 e0       	ldi	r21, 0x01	; 1
    13f0:	59 f4       	brne	.+22     	; 0x1408 <atan2+0xe>
    13f2:	5e ef       	ldi	r21, 0xFE	; 254
    13f4:	09 c0       	rjmp	.+18     	; 0x1408 <atan2+0xe>
    13f6:	58 c1       	rjmp	.+688    	; 0x16a8 <__fp_nan>
    13f8:	c0 c1       	rjmp	.+896    	; 0x177a <__fp_zero>

000013fa <atan2>:
    13fa:	e9 2f       	mov	r30, r25
    13fc:	e0 78       	andi	r30, 0x80	; 128
    13fe:	9b d1       	rcall	.+822    	; 0x1736 <__fp_split3>
    1400:	68 f3       	brcs	.-38     	; 0x13dc <__addsf3x+0xa6>
    1402:	09 2e       	mov	r0, r25
    1404:	05 2a       	or	r0, r21
    1406:	c1 f3       	breq	.-16     	; 0x13f8 <__addsf3x+0xc2>
    1408:	26 17       	cp	r18, r22
    140a:	37 07       	cpc	r19, r23
    140c:	48 07       	cpc	r20, r24
    140e:	59 07       	cpc	r21, r25
    1410:	38 f0       	brcs	.+14     	; 0x1420 <atan2+0x26>
    1412:	0e 2e       	mov	r0, r30
    1414:	07 f8       	bld	r0, 7
    1416:	e0 25       	eor	r30, r0
    1418:	69 f0       	breq	.+26     	; 0x1434 <atan2+0x3a>
    141a:	e0 25       	eor	r30, r0
    141c:	e0 64       	ori	r30, 0x40	; 64
    141e:	0a c0       	rjmp	.+20     	; 0x1434 <atan2+0x3a>
    1420:	ef 63       	ori	r30, 0x3F	; 63
    1422:	07 f8       	bld	r0, 7
    1424:	00 94       	com	r0
    1426:	07 fa       	bst	r0, 7
    1428:	db 01       	movw	r26, r22
    142a:	b9 01       	movw	r22, r18
    142c:	9d 01       	movw	r18, r26
    142e:	dc 01       	movw	r26, r24
    1430:	ca 01       	movw	r24, r20
    1432:	ad 01       	movw	r20, r26
    1434:	ef 93       	push	r30
    1436:	47 d0       	rcall	.+142    	; 0x14c6 <__divsf3_pse>
    1438:	6d d1       	rcall	.+730    	; 0x1714 <__fp_round>
    143a:	0a d0       	rcall	.+20     	; 0x1450 <atan>
    143c:	5f 91       	pop	r21
    143e:	55 23       	and	r21, r21
    1440:	31 f0       	breq	.+12     	; 0x144e <atan2+0x54>
    1442:	2b ed       	ldi	r18, 0xDB	; 219
    1444:	3f e0       	ldi	r19, 0x0F	; 15
    1446:	49 e4       	ldi	r20, 0x49	; 73
    1448:	50 fd       	sbrc	r21, 0
    144a:	49 ec       	ldi	r20, 0xC9	; 201
    144c:	63 cf       	rjmp	.-314    	; 0x1314 <__addsf3>
    144e:	08 95       	ret

00001450 <atan>:
    1450:	df 93       	push	r29
    1452:	dd 27       	eor	r29, r29
    1454:	b9 2f       	mov	r27, r25
    1456:	bf 77       	andi	r27, 0x7F	; 127
    1458:	40 e8       	ldi	r20, 0x80	; 128
    145a:	5f e3       	ldi	r21, 0x3F	; 63
    145c:	16 16       	cp	r1, r22
    145e:	17 06       	cpc	r1, r23
    1460:	48 07       	cpc	r20, r24
    1462:	5b 07       	cpc	r21, r27
    1464:	10 f4       	brcc	.+4      	; 0x146a <atan+0x1a>
    1466:	d9 2f       	mov	r29, r25
    1468:	93 d1       	rcall	.+806    	; 0x1790 <inverse>
    146a:	9f 93       	push	r25
    146c:	8f 93       	push	r24
    146e:	7f 93       	push	r23
    1470:	6f 93       	push	r22
    1472:	f8 d1       	rcall	.+1008   	; 0x1864 <square>
    1474:	e4 ee       	ldi	r30, 0xE4	; 228
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	1a d1       	rcall	.+564    	; 0x16ae <__fp_powser>
    147a:	4c d1       	rcall	.+664    	; 0x1714 <__fp_round>
    147c:	2f 91       	pop	r18
    147e:	3f 91       	pop	r19
    1480:	4f 91       	pop	r20
    1482:	5f 91       	pop	r21
    1484:	98 d1       	rcall	.+816    	; 0x17b6 <__mulsf3x>
    1486:	dd 23       	and	r29, r29
    1488:	49 f0       	breq	.+18     	; 0x149c <atan+0x4c>
    148a:	90 58       	subi	r25, 0x80	; 128
    148c:	a2 ea       	ldi	r26, 0xA2	; 162
    148e:	2a ed       	ldi	r18, 0xDA	; 218
    1490:	3f e0       	ldi	r19, 0x0F	; 15
    1492:	49 ec       	ldi	r20, 0xC9	; 201
    1494:	5f e3       	ldi	r21, 0x3F	; 63
    1496:	d0 78       	andi	r29, 0x80	; 128
    1498:	5d 27       	eor	r21, r29
    149a:	4d df       	rcall	.-358    	; 0x1336 <__addsf3x>
    149c:	df 91       	pop	r29
    149e:	3a c1       	rjmp	.+628    	; 0x1714 <__fp_round>

000014a0 <__cmpsf2>:
    14a0:	d9 d0       	rcall	.+434    	; 0x1654 <__fp_cmp>
    14a2:	08 f4       	brcc	.+2      	; 0x14a6 <__cmpsf2+0x6>
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	08 95       	ret

000014a8 <__divsf3>:
    14a8:	0c d0       	rcall	.+24     	; 0x14c2 <__divsf3x>
    14aa:	34 c1       	rjmp	.+616    	; 0x1714 <__fp_round>
    14ac:	2c d1       	rcall	.+600    	; 0x1706 <__fp_pscB>
    14ae:	40 f0       	brcs	.+16     	; 0x14c0 <__divsf3+0x18>
    14b0:	23 d1       	rcall	.+582    	; 0x16f8 <__fp_pscA>
    14b2:	30 f0       	brcs	.+12     	; 0x14c0 <__divsf3+0x18>
    14b4:	21 f4       	brne	.+8      	; 0x14be <__divsf3+0x16>
    14b6:	5f 3f       	cpi	r21, 0xFF	; 255
    14b8:	19 f0       	breq	.+6      	; 0x14c0 <__divsf3+0x18>
    14ba:	f0 c0       	rjmp	.+480    	; 0x169c <__fp_inf>
    14bc:	51 11       	cpse	r21, r1
    14be:	5e c1       	rjmp	.+700    	; 0x177c <__fp_szero>
    14c0:	f3 c0       	rjmp	.+486    	; 0x16a8 <__fp_nan>

000014c2 <__divsf3x>:
    14c2:	39 d1       	rcall	.+626    	; 0x1736 <__fp_split3>
    14c4:	98 f3       	brcs	.-26     	; 0x14ac <__divsf3+0x4>

000014c6 <__divsf3_pse>:
    14c6:	99 23       	and	r25, r25
    14c8:	c9 f3       	breq	.-14     	; 0x14bc <__divsf3+0x14>
    14ca:	55 23       	and	r21, r21
    14cc:	b1 f3       	breq	.-20     	; 0x14ba <__divsf3+0x12>
    14ce:	95 1b       	sub	r25, r21
    14d0:	55 0b       	sbc	r21, r21
    14d2:	bb 27       	eor	r27, r27
    14d4:	aa 27       	eor	r26, r26
    14d6:	62 17       	cp	r22, r18
    14d8:	73 07       	cpc	r23, r19
    14da:	84 07       	cpc	r24, r20
    14dc:	38 f0       	brcs	.+14     	; 0x14ec <__divsf3_pse+0x26>
    14de:	9f 5f       	subi	r25, 0xFF	; 255
    14e0:	5f 4f       	sbci	r21, 0xFF	; 255
    14e2:	22 0f       	add	r18, r18
    14e4:	33 1f       	adc	r19, r19
    14e6:	44 1f       	adc	r20, r20
    14e8:	aa 1f       	adc	r26, r26
    14ea:	a9 f3       	breq	.-22     	; 0x14d6 <__divsf3_pse+0x10>
    14ec:	33 d0       	rcall	.+102    	; 0x1554 <__divsf3_pse+0x8e>
    14ee:	0e 2e       	mov	r0, r30
    14f0:	3a f0       	brmi	.+14     	; 0x1500 <__divsf3_pse+0x3a>
    14f2:	e0 e8       	ldi	r30, 0x80	; 128
    14f4:	30 d0       	rcall	.+96     	; 0x1556 <__divsf3_pse+0x90>
    14f6:	91 50       	subi	r25, 0x01	; 1
    14f8:	50 40       	sbci	r21, 0x00	; 0
    14fa:	e6 95       	lsr	r30
    14fc:	00 1c       	adc	r0, r0
    14fe:	ca f7       	brpl	.-14     	; 0x14f2 <__divsf3_pse+0x2c>
    1500:	29 d0       	rcall	.+82     	; 0x1554 <__divsf3_pse+0x8e>
    1502:	fe 2f       	mov	r31, r30
    1504:	27 d0       	rcall	.+78     	; 0x1554 <__divsf3_pse+0x8e>
    1506:	66 0f       	add	r22, r22
    1508:	77 1f       	adc	r23, r23
    150a:	88 1f       	adc	r24, r24
    150c:	bb 1f       	adc	r27, r27
    150e:	26 17       	cp	r18, r22
    1510:	37 07       	cpc	r19, r23
    1512:	48 07       	cpc	r20, r24
    1514:	ab 07       	cpc	r26, r27
    1516:	b0 e8       	ldi	r27, 0x80	; 128
    1518:	09 f0       	breq	.+2      	; 0x151c <__divsf3_pse+0x56>
    151a:	bb 0b       	sbc	r27, r27
    151c:	80 2d       	mov	r24, r0
    151e:	bf 01       	movw	r22, r30
    1520:	ff 27       	eor	r31, r31
    1522:	93 58       	subi	r25, 0x83	; 131
    1524:	5f 4f       	sbci	r21, 0xFF	; 255
    1526:	2a f0       	brmi	.+10     	; 0x1532 <__divsf3_pse+0x6c>
    1528:	9e 3f       	cpi	r25, 0xFE	; 254
    152a:	51 05       	cpc	r21, r1
    152c:	68 f0       	brcs	.+26     	; 0x1548 <__divsf3_pse+0x82>
    152e:	b6 c0       	rjmp	.+364    	; 0x169c <__fp_inf>
    1530:	25 c1       	rjmp	.+586    	; 0x177c <__fp_szero>
    1532:	5f 3f       	cpi	r21, 0xFF	; 255
    1534:	ec f3       	brlt	.-6      	; 0x1530 <__divsf3_pse+0x6a>
    1536:	98 3e       	cpi	r25, 0xE8	; 232
    1538:	dc f3       	brlt	.-10     	; 0x1530 <__divsf3_pse+0x6a>
    153a:	86 95       	lsr	r24
    153c:	77 95       	ror	r23
    153e:	67 95       	ror	r22
    1540:	b7 95       	ror	r27
    1542:	f7 95       	ror	r31
    1544:	9f 5f       	subi	r25, 0xFF	; 255
    1546:	c9 f7       	brne	.-14     	; 0x153a <__divsf3_pse+0x74>
    1548:	88 0f       	add	r24, r24
    154a:	91 1d       	adc	r25, r1
    154c:	96 95       	lsr	r25
    154e:	87 95       	ror	r24
    1550:	97 f9       	bld	r25, 7
    1552:	08 95       	ret
    1554:	e1 e0       	ldi	r30, 0x01	; 1
    1556:	66 0f       	add	r22, r22
    1558:	77 1f       	adc	r23, r23
    155a:	88 1f       	adc	r24, r24
    155c:	bb 1f       	adc	r27, r27
    155e:	62 17       	cp	r22, r18
    1560:	73 07       	cpc	r23, r19
    1562:	84 07       	cpc	r24, r20
    1564:	ba 07       	cpc	r27, r26
    1566:	20 f0       	brcs	.+8      	; 0x1570 <__divsf3_pse+0xaa>
    1568:	62 1b       	sub	r22, r18
    156a:	73 0b       	sbc	r23, r19
    156c:	84 0b       	sbc	r24, r20
    156e:	ba 0b       	sbc	r27, r26
    1570:	ee 1f       	adc	r30, r30
    1572:	88 f7       	brcc	.-30     	; 0x1556 <__divsf3_pse+0x90>
    1574:	e0 95       	com	r30
    1576:	08 95       	ret

00001578 <__fixsfsi>:
    1578:	04 d0       	rcall	.+8      	; 0x1582 <__fixunssfsi>
    157a:	68 94       	set
    157c:	b1 11       	cpse	r27, r1
    157e:	fe c0       	rjmp	.+508    	; 0x177c <__fp_szero>
    1580:	08 95       	ret

00001582 <__fixunssfsi>:
    1582:	e1 d0       	rcall	.+450    	; 0x1746 <__fp_splitA>
    1584:	88 f0       	brcs	.+34     	; 0x15a8 <__fixunssfsi+0x26>
    1586:	9f 57       	subi	r25, 0x7F	; 127
    1588:	90 f0       	brcs	.+36     	; 0x15ae <__fixunssfsi+0x2c>
    158a:	b9 2f       	mov	r27, r25
    158c:	99 27       	eor	r25, r25
    158e:	b7 51       	subi	r27, 0x17	; 23
    1590:	a0 f0       	brcs	.+40     	; 0x15ba <__fixunssfsi+0x38>
    1592:	d1 f0       	breq	.+52     	; 0x15c8 <__fixunssfsi+0x46>
    1594:	66 0f       	add	r22, r22
    1596:	77 1f       	adc	r23, r23
    1598:	88 1f       	adc	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	1a f0       	brmi	.+6      	; 0x15a4 <__fixunssfsi+0x22>
    159e:	ba 95       	dec	r27
    15a0:	c9 f7       	brne	.-14     	; 0x1594 <__fixunssfsi+0x12>
    15a2:	12 c0       	rjmp	.+36     	; 0x15c8 <__fixunssfsi+0x46>
    15a4:	b1 30       	cpi	r27, 0x01	; 1
    15a6:	81 f0       	breq	.+32     	; 0x15c8 <__fixunssfsi+0x46>
    15a8:	e8 d0       	rcall	.+464    	; 0x177a <__fp_zero>
    15aa:	b1 e0       	ldi	r27, 0x01	; 1
    15ac:	08 95       	ret
    15ae:	e5 c0       	rjmp	.+458    	; 0x177a <__fp_zero>
    15b0:	67 2f       	mov	r22, r23
    15b2:	78 2f       	mov	r23, r24
    15b4:	88 27       	eor	r24, r24
    15b6:	b8 5f       	subi	r27, 0xF8	; 248
    15b8:	39 f0       	breq	.+14     	; 0x15c8 <__fixunssfsi+0x46>
    15ba:	b9 3f       	cpi	r27, 0xF9	; 249
    15bc:	cc f3       	brlt	.-14     	; 0x15b0 <__fixunssfsi+0x2e>
    15be:	86 95       	lsr	r24
    15c0:	77 95       	ror	r23
    15c2:	67 95       	ror	r22
    15c4:	b3 95       	inc	r27
    15c6:	d9 f7       	brne	.-10     	; 0x15be <__fixunssfsi+0x3c>
    15c8:	3e f4       	brtc	.+14     	; 0x15d8 <__fixunssfsi+0x56>
    15ca:	90 95       	com	r25
    15cc:	80 95       	com	r24
    15ce:	70 95       	com	r23
    15d0:	61 95       	neg	r22
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	8f 4f       	sbci	r24, 0xFF	; 255
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	08 95       	ret

000015da <__floatunsisf>:
    15da:	e8 94       	clt
    15dc:	09 c0       	rjmp	.+18     	; 0x15f0 <__floatsisf+0x12>

000015de <__floatsisf>:
    15de:	97 fb       	bst	r25, 7
    15e0:	3e f4       	brtc	.+14     	; 0x15f0 <__floatsisf+0x12>
    15e2:	90 95       	com	r25
    15e4:	80 95       	com	r24
    15e6:	70 95       	com	r23
    15e8:	61 95       	neg	r22
    15ea:	7f 4f       	sbci	r23, 0xFF	; 255
    15ec:	8f 4f       	sbci	r24, 0xFF	; 255
    15ee:	9f 4f       	sbci	r25, 0xFF	; 255
    15f0:	99 23       	and	r25, r25
    15f2:	a9 f0       	breq	.+42     	; 0x161e <__floatsisf+0x40>
    15f4:	f9 2f       	mov	r31, r25
    15f6:	96 e9       	ldi	r25, 0x96	; 150
    15f8:	bb 27       	eor	r27, r27
    15fa:	93 95       	inc	r25
    15fc:	f6 95       	lsr	r31
    15fe:	87 95       	ror	r24
    1600:	77 95       	ror	r23
    1602:	67 95       	ror	r22
    1604:	b7 95       	ror	r27
    1606:	f1 11       	cpse	r31, r1
    1608:	f8 cf       	rjmp	.-16     	; 0x15fa <__floatsisf+0x1c>
    160a:	fa f4       	brpl	.+62     	; 0x164a <__floatsisf+0x6c>
    160c:	bb 0f       	add	r27, r27
    160e:	11 f4       	brne	.+4      	; 0x1614 <__floatsisf+0x36>
    1610:	60 ff       	sbrs	r22, 0
    1612:	1b c0       	rjmp	.+54     	; 0x164a <__floatsisf+0x6c>
    1614:	6f 5f       	subi	r22, 0xFF	; 255
    1616:	7f 4f       	sbci	r23, 0xFF	; 255
    1618:	8f 4f       	sbci	r24, 0xFF	; 255
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	16 c0       	rjmp	.+44     	; 0x164a <__floatsisf+0x6c>
    161e:	88 23       	and	r24, r24
    1620:	11 f0       	breq	.+4      	; 0x1626 <__floatsisf+0x48>
    1622:	96 e9       	ldi	r25, 0x96	; 150
    1624:	11 c0       	rjmp	.+34     	; 0x1648 <__floatsisf+0x6a>
    1626:	77 23       	and	r23, r23
    1628:	21 f0       	breq	.+8      	; 0x1632 <__floatsisf+0x54>
    162a:	9e e8       	ldi	r25, 0x8E	; 142
    162c:	87 2f       	mov	r24, r23
    162e:	76 2f       	mov	r23, r22
    1630:	05 c0       	rjmp	.+10     	; 0x163c <__floatsisf+0x5e>
    1632:	66 23       	and	r22, r22
    1634:	71 f0       	breq	.+28     	; 0x1652 <__floatsisf+0x74>
    1636:	96 e8       	ldi	r25, 0x86	; 134
    1638:	86 2f       	mov	r24, r22
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	2a f0       	brmi	.+10     	; 0x164a <__floatsisf+0x6c>
    1640:	9a 95       	dec	r25
    1642:	66 0f       	add	r22, r22
    1644:	77 1f       	adc	r23, r23
    1646:	88 1f       	adc	r24, r24
    1648:	da f7       	brpl	.-10     	; 0x1640 <__floatsisf+0x62>
    164a:	88 0f       	add	r24, r24
    164c:	96 95       	lsr	r25
    164e:	87 95       	ror	r24
    1650:	97 f9       	bld	r25, 7
    1652:	08 95       	ret

00001654 <__fp_cmp>:
    1654:	99 0f       	add	r25, r25
    1656:	00 08       	sbc	r0, r0
    1658:	55 0f       	add	r21, r21
    165a:	aa 0b       	sbc	r26, r26
    165c:	e0 e8       	ldi	r30, 0x80	; 128
    165e:	fe ef       	ldi	r31, 0xFE	; 254
    1660:	16 16       	cp	r1, r22
    1662:	17 06       	cpc	r1, r23
    1664:	e8 07       	cpc	r30, r24
    1666:	f9 07       	cpc	r31, r25
    1668:	c0 f0       	brcs	.+48     	; 0x169a <__fp_cmp+0x46>
    166a:	12 16       	cp	r1, r18
    166c:	13 06       	cpc	r1, r19
    166e:	e4 07       	cpc	r30, r20
    1670:	f5 07       	cpc	r31, r21
    1672:	98 f0       	brcs	.+38     	; 0x169a <__fp_cmp+0x46>
    1674:	62 1b       	sub	r22, r18
    1676:	73 0b       	sbc	r23, r19
    1678:	84 0b       	sbc	r24, r20
    167a:	95 0b       	sbc	r25, r21
    167c:	39 f4       	brne	.+14     	; 0x168c <__fp_cmp+0x38>
    167e:	0a 26       	eor	r0, r26
    1680:	61 f0       	breq	.+24     	; 0x169a <__fp_cmp+0x46>
    1682:	23 2b       	or	r18, r19
    1684:	24 2b       	or	r18, r20
    1686:	25 2b       	or	r18, r21
    1688:	21 f4       	brne	.+8      	; 0x1692 <__fp_cmp+0x3e>
    168a:	08 95       	ret
    168c:	0a 26       	eor	r0, r26
    168e:	09 f4       	brne	.+2      	; 0x1692 <__fp_cmp+0x3e>
    1690:	a1 40       	sbci	r26, 0x01	; 1
    1692:	a6 95       	lsr	r26
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	81 1d       	adc	r24, r1
    1698:	81 1d       	adc	r24, r1
    169a:	08 95       	ret

0000169c <__fp_inf>:
    169c:	97 f9       	bld	r25, 7
    169e:	9f 67       	ori	r25, 0x7F	; 127
    16a0:	80 e8       	ldi	r24, 0x80	; 128
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	08 95       	ret

000016a8 <__fp_nan>:
    16a8:	9f ef       	ldi	r25, 0xFF	; 255
    16aa:	80 ec       	ldi	r24, 0xC0	; 192
    16ac:	08 95       	ret

000016ae <__fp_powser>:
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	1f 93       	push	r17
    16b4:	0f 93       	push	r16
    16b6:	ff 92       	push	r15
    16b8:	ef 92       	push	r14
    16ba:	df 92       	push	r13
    16bc:	7b 01       	movw	r14, r22
    16be:	8c 01       	movw	r16, r24
    16c0:	68 94       	set
    16c2:	05 c0       	rjmp	.+10     	; 0x16ce <__fp_powser+0x20>
    16c4:	da 2e       	mov	r13, r26
    16c6:	ef 01       	movw	r28, r30
    16c8:	76 d0       	rcall	.+236    	; 0x17b6 <__mulsf3x>
    16ca:	fe 01       	movw	r30, r28
    16cc:	e8 94       	clt
    16ce:	a5 91       	lpm	r26, Z+
    16d0:	25 91       	lpm	r18, Z+
    16d2:	35 91       	lpm	r19, Z+
    16d4:	45 91       	lpm	r20, Z+
    16d6:	55 91       	lpm	r21, Z+
    16d8:	ae f3       	brts	.-22     	; 0x16c4 <__fp_powser+0x16>
    16da:	ef 01       	movw	r28, r30
    16dc:	2c de       	rcall	.-936    	; 0x1336 <__addsf3x>
    16de:	fe 01       	movw	r30, r28
    16e0:	97 01       	movw	r18, r14
    16e2:	a8 01       	movw	r20, r16
    16e4:	da 94       	dec	r13
    16e6:	79 f7       	brne	.-34     	; 0x16c6 <__fp_powser+0x18>
    16e8:	df 90       	pop	r13
    16ea:	ef 90       	pop	r14
    16ec:	ff 90       	pop	r15
    16ee:	0f 91       	pop	r16
    16f0:	1f 91       	pop	r17
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <__fp_pscA>:
    16f8:	00 24       	eor	r0, r0
    16fa:	0a 94       	dec	r0
    16fc:	16 16       	cp	r1, r22
    16fe:	17 06       	cpc	r1, r23
    1700:	18 06       	cpc	r1, r24
    1702:	09 06       	cpc	r0, r25
    1704:	08 95       	ret

00001706 <__fp_pscB>:
    1706:	00 24       	eor	r0, r0
    1708:	0a 94       	dec	r0
    170a:	12 16       	cp	r1, r18
    170c:	13 06       	cpc	r1, r19
    170e:	14 06       	cpc	r1, r20
    1710:	05 06       	cpc	r0, r21
    1712:	08 95       	ret

00001714 <__fp_round>:
    1714:	09 2e       	mov	r0, r25
    1716:	03 94       	inc	r0
    1718:	00 0c       	add	r0, r0
    171a:	11 f4       	brne	.+4      	; 0x1720 <__fp_round+0xc>
    171c:	88 23       	and	r24, r24
    171e:	52 f0       	brmi	.+20     	; 0x1734 <__fp_round+0x20>
    1720:	bb 0f       	add	r27, r27
    1722:	40 f4       	brcc	.+16     	; 0x1734 <__fp_round+0x20>
    1724:	bf 2b       	or	r27, r31
    1726:	11 f4       	brne	.+4      	; 0x172c <__fp_round+0x18>
    1728:	60 ff       	sbrs	r22, 0
    172a:	04 c0       	rjmp	.+8      	; 0x1734 <__fp_round+0x20>
    172c:	6f 5f       	subi	r22, 0xFF	; 255
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	8f 4f       	sbci	r24, 0xFF	; 255
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	08 95       	ret

00001736 <__fp_split3>:
    1736:	57 fd       	sbrc	r21, 7
    1738:	90 58       	subi	r25, 0x80	; 128
    173a:	44 0f       	add	r20, r20
    173c:	55 1f       	adc	r21, r21
    173e:	59 f0       	breq	.+22     	; 0x1756 <__fp_splitA+0x10>
    1740:	5f 3f       	cpi	r21, 0xFF	; 255
    1742:	71 f0       	breq	.+28     	; 0x1760 <__fp_splitA+0x1a>
    1744:	47 95       	ror	r20

00001746 <__fp_splitA>:
    1746:	88 0f       	add	r24, r24
    1748:	97 fb       	bst	r25, 7
    174a:	99 1f       	adc	r25, r25
    174c:	61 f0       	breq	.+24     	; 0x1766 <__fp_splitA+0x20>
    174e:	9f 3f       	cpi	r25, 0xFF	; 255
    1750:	79 f0       	breq	.+30     	; 0x1770 <__fp_splitA+0x2a>
    1752:	87 95       	ror	r24
    1754:	08 95       	ret
    1756:	12 16       	cp	r1, r18
    1758:	13 06       	cpc	r1, r19
    175a:	14 06       	cpc	r1, r20
    175c:	55 1f       	adc	r21, r21
    175e:	f2 cf       	rjmp	.-28     	; 0x1744 <__fp_split3+0xe>
    1760:	46 95       	lsr	r20
    1762:	f1 df       	rcall	.-30     	; 0x1746 <__fp_splitA>
    1764:	08 c0       	rjmp	.+16     	; 0x1776 <__fp_splitA+0x30>
    1766:	16 16       	cp	r1, r22
    1768:	17 06       	cpc	r1, r23
    176a:	18 06       	cpc	r1, r24
    176c:	99 1f       	adc	r25, r25
    176e:	f1 cf       	rjmp	.-30     	; 0x1752 <__fp_splitA+0xc>
    1770:	86 95       	lsr	r24
    1772:	71 05       	cpc	r23, r1
    1774:	61 05       	cpc	r22, r1
    1776:	08 94       	sec
    1778:	08 95       	ret

0000177a <__fp_zero>:
    177a:	e8 94       	clt

0000177c <__fp_szero>:
    177c:	bb 27       	eor	r27, r27
    177e:	66 27       	eor	r22, r22
    1780:	77 27       	eor	r23, r23
    1782:	cb 01       	movw	r24, r22
    1784:	97 f9       	bld	r25, 7
    1786:	08 95       	ret

00001788 <__gesf2>:
    1788:	65 df       	rcall	.-310    	; 0x1654 <__fp_cmp>
    178a:	08 f4       	brcc	.+2      	; 0x178e <__gesf2+0x6>
    178c:	8f ef       	ldi	r24, 0xFF	; 255
    178e:	08 95       	ret

00001790 <inverse>:
    1790:	9b 01       	movw	r18, r22
    1792:	ac 01       	movw	r20, r24
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	80 e8       	ldi	r24, 0x80	; 128
    179a:	9f e3       	ldi	r25, 0x3F	; 63
    179c:	85 ce       	rjmp	.-758    	; 0x14a8 <__divsf3>

0000179e <__mulsf3>:
    179e:	0b d0       	rcall	.+22     	; 0x17b6 <__mulsf3x>
    17a0:	b9 cf       	rjmp	.-142    	; 0x1714 <__fp_round>
    17a2:	aa df       	rcall	.-172    	; 0x16f8 <__fp_pscA>
    17a4:	28 f0       	brcs	.+10     	; 0x17b0 <__mulsf3+0x12>
    17a6:	af df       	rcall	.-162    	; 0x1706 <__fp_pscB>
    17a8:	18 f0       	brcs	.+6      	; 0x17b0 <__mulsf3+0x12>
    17aa:	95 23       	and	r25, r21
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <__mulsf3+0x12>
    17ae:	76 cf       	rjmp	.-276    	; 0x169c <__fp_inf>
    17b0:	7b cf       	rjmp	.-266    	; 0x16a8 <__fp_nan>
    17b2:	11 24       	eor	r1, r1
    17b4:	e3 cf       	rjmp	.-58     	; 0x177c <__fp_szero>

000017b6 <__mulsf3x>:
    17b6:	bf df       	rcall	.-130    	; 0x1736 <__fp_split3>
    17b8:	a0 f3       	brcs	.-24     	; 0x17a2 <__mulsf3+0x4>

000017ba <__mulsf3_pse>:
    17ba:	95 9f       	mul	r25, r21
    17bc:	d1 f3       	breq	.-12     	; 0x17b2 <__mulsf3+0x14>
    17be:	95 0f       	add	r25, r21
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	55 1f       	adc	r21, r21
    17c4:	62 9f       	mul	r22, r18
    17c6:	f0 01       	movw	r30, r0
    17c8:	72 9f       	mul	r23, r18
    17ca:	bb 27       	eor	r27, r27
    17cc:	f0 0d       	add	r31, r0
    17ce:	b1 1d       	adc	r27, r1
    17d0:	63 9f       	mul	r22, r19
    17d2:	aa 27       	eor	r26, r26
    17d4:	f0 0d       	add	r31, r0
    17d6:	b1 1d       	adc	r27, r1
    17d8:	aa 1f       	adc	r26, r26
    17da:	64 9f       	mul	r22, r20
    17dc:	66 27       	eor	r22, r22
    17de:	b0 0d       	add	r27, r0
    17e0:	a1 1d       	adc	r26, r1
    17e2:	66 1f       	adc	r22, r22
    17e4:	82 9f       	mul	r24, r18
    17e6:	22 27       	eor	r18, r18
    17e8:	b0 0d       	add	r27, r0
    17ea:	a1 1d       	adc	r26, r1
    17ec:	62 1f       	adc	r22, r18
    17ee:	73 9f       	mul	r23, r19
    17f0:	b0 0d       	add	r27, r0
    17f2:	a1 1d       	adc	r26, r1
    17f4:	62 1f       	adc	r22, r18
    17f6:	83 9f       	mul	r24, r19
    17f8:	a0 0d       	add	r26, r0
    17fa:	61 1d       	adc	r22, r1
    17fc:	22 1f       	adc	r18, r18
    17fe:	74 9f       	mul	r23, r20
    1800:	33 27       	eor	r19, r19
    1802:	a0 0d       	add	r26, r0
    1804:	61 1d       	adc	r22, r1
    1806:	23 1f       	adc	r18, r19
    1808:	84 9f       	mul	r24, r20
    180a:	60 0d       	add	r22, r0
    180c:	21 1d       	adc	r18, r1
    180e:	82 2f       	mov	r24, r18
    1810:	76 2f       	mov	r23, r22
    1812:	6a 2f       	mov	r22, r26
    1814:	11 24       	eor	r1, r1
    1816:	9f 57       	subi	r25, 0x7F	; 127
    1818:	50 40       	sbci	r21, 0x00	; 0
    181a:	8a f0       	brmi	.+34     	; 0x183e <__mulsf3_pse+0x84>
    181c:	e1 f0       	breq	.+56     	; 0x1856 <__mulsf3_pse+0x9c>
    181e:	88 23       	and	r24, r24
    1820:	4a f0       	brmi	.+18     	; 0x1834 <__mulsf3_pse+0x7a>
    1822:	ee 0f       	add	r30, r30
    1824:	ff 1f       	adc	r31, r31
    1826:	bb 1f       	adc	r27, r27
    1828:	66 1f       	adc	r22, r22
    182a:	77 1f       	adc	r23, r23
    182c:	88 1f       	adc	r24, r24
    182e:	91 50       	subi	r25, 0x01	; 1
    1830:	50 40       	sbci	r21, 0x00	; 0
    1832:	a9 f7       	brne	.-22     	; 0x181e <__mulsf3_pse+0x64>
    1834:	9e 3f       	cpi	r25, 0xFE	; 254
    1836:	51 05       	cpc	r21, r1
    1838:	70 f0       	brcs	.+28     	; 0x1856 <__mulsf3_pse+0x9c>
    183a:	30 cf       	rjmp	.-416    	; 0x169c <__fp_inf>
    183c:	9f cf       	rjmp	.-194    	; 0x177c <__fp_szero>
    183e:	5f 3f       	cpi	r21, 0xFF	; 255
    1840:	ec f3       	brlt	.-6      	; 0x183c <__mulsf3_pse+0x82>
    1842:	98 3e       	cpi	r25, 0xE8	; 232
    1844:	dc f3       	brlt	.-10     	; 0x183c <__mulsf3_pse+0x82>
    1846:	86 95       	lsr	r24
    1848:	77 95       	ror	r23
    184a:	67 95       	ror	r22
    184c:	b7 95       	ror	r27
    184e:	f7 95       	ror	r31
    1850:	e7 95       	ror	r30
    1852:	9f 5f       	subi	r25, 0xFF	; 255
    1854:	c1 f7       	brne	.-16     	; 0x1846 <__mulsf3_pse+0x8c>
    1856:	fe 2b       	or	r31, r30
    1858:	88 0f       	add	r24, r24
    185a:	91 1d       	adc	r25, r1
    185c:	96 95       	lsr	r25
    185e:	87 95       	ror	r24
    1860:	97 f9       	bld	r25, 7
    1862:	08 95       	ret

00001864 <square>:
    1864:	9b 01       	movw	r18, r22
    1866:	ac 01       	movw	r20, r24
    1868:	9a cf       	rjmp	.-204    	; 0x179e <__mulsf3>

0000186a <_ZN14HardwareSerial9availableEv>:
    186a:	fc 01       	movw	r30, r24
    186c:	91 8d       	ldd	r25, Z+25	; 0x19
    186e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1870:	89 2f       	mov	r24, r25
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	80 5c       	subi	r24, 0xC0	; 192
    1876:	9f 4f       	sbci	r25, 0xFF	; 255
    1878:	82 1b       	sub	r24, r18
    187a:	91 09       	sbc	r25, r1
    187c:	8f 73       	andi	r24, 0x3F	; 63
    187e:	99 27       	eor	r25, r25
    1880:	08 95       	ret

00001882 <_ZN14HardwareSerial4peekEv>:
    1882:	fc 01       	movw	r30, r24
    1884:	91 8d       	ldd	r25, Z+25	; 0x19
    1886:	82 8d       	ldd	r24, Z+26	; 0x1a
    1888:	98 17       	cp	r25, r24
    188a:	31 f0       	breq	.+12     	; 0x1898 <_ZN14HardwareSerial4peekEv+0x16>
    188c:	82 8d       	ldd	r24, Z+26	; 0x1a
    188e:	e8 0f       	add	r30, r24
    1890:	f1 1d       	adc	r31, r1
    1892:	85 8d       	ldd	r24, Z+29	; 0x1d
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	08 95       	ret
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	9f ef       	ldi	r25, 0xFF	; 255
    189c:	08 95       	ret

0000189e <_ZN14HardwareSerial4readEv>:
    189e:	fc 01       	movw	r30, r24
    18a0:	91 8d       	ldd	r25, Z+25	; 0x19
    18a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    18a4:	98 17       	cp	r25, r24
    18a6:	61 f0       	breq	.+24     	; 0x18c0 <_ZN14HardwareSerial4readEv+0x22>
    18a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    18aa:	df 01       	movw	r26, r30
    18ac:	a8 0f       	add	r26, r24
    18ae:	b1 1d       	adc	r27, r1
    18b0:	5d 96       	adiw	r26, 0x1d	; 29
    18b2:	8c 91       	ld	r24, X
    18b4:	92 8d       	ldd	r25, Z+26	; 0x1a
    18b6:	9f 5f       	subi	r25, 0xFF	; 255
    18b8:	9f 73       	andi	r25, 0x3F	; 63
    18ba:	92 8f       	std	Z+26, r25	; 0x1a
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	08 95       	ret
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
    18c2:	9f ef       	ldi	r25, 0xFF	; 255
    18c4:	08 95       	ret

000018c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
    18c6:	fc 01       	movw	r30, r24
    18c8:	84 8d       	ldd	r24, Z+28	; 0x1c
    18ca:	df 01       	movw	r26, r30
    18cc:	a8 0f       	add	r26, r24
    18ce:	b1 1d       	adc	r27, r1
    18d0:	a3 5a       	subi	r26, 0xA3	; 163
    18d2:	bf 4f       	sbci	r27, 0xFF	; 255
    18d4:	2c 91       	ld	r18, X
    18d6:	84 8d       	ldd	r24, Z+28	; 0x1c
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	8f 73       	andi	r24, 0x3F	; 63
    18de:	99 27       	eor	r25, r25
    18e0:	84 8f       	std	Z+28, r24	; 0x1c
    18e2:	a6 89       	ldd	r26, Z+22	; 0x16
    18e4:	b7 89       	ldd	r27, Z+23	; 0x17
    18e6:	2c 93       	st	X, r18
    18e8:	a0 89       	ldd	r26, Z+16	; 0x10
    18ea:	b1 89       	ldd	r27, Z+17	; 0x11
    18ec:	8c 91       	ld	r24, X
    18ee:	80 64       	ori	r24, 0x40	; 64
    18f0:	8c 93       	st	X, r24
    18f2:	93 8d       	ldd	r25, Z+27	; 0x1b
    18f4:	84 8d       	ldd	r24, Z+28	; 0x1c
    18f6:	98 13       	cpse	r25, r24
    18f8:	06 c0       	rjmp	.+12     	; 0x1906 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    18fa:	02 88       	ldd	r0, Z+18	; 0x12
    18fc:	f3 89       	ldd	r31, Z+19	; 0x13
    18fe:	e0 2d       	mov	r30, r0
    1900:	80 81       	ld	r24, Z
    1902:	8f 7d       	andi	r24, 0xDF	; 223
    1904:	80 83       	st	Z, r24
    1906:	08 95       	ret

00001908 <_ZN14HardwareSerial5flushEv>:
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	ec 01       	movw	r28, r24
    190e:	88 8d       	ldd	r24, Y+24	; 0x18
    1910:	88 23       	and	r24, r24
    1912:	c1 f0       	breq	.+48     	; 0x1944 <_ZN14HardwareSerial5flushEv+0x3c>
    1914:	ea 89       	ldd	r30, Y+18	; 0x12
    1916:	fb 89       	ldd	r31, Y+19	; 0x13
    1918:	80 81       	ld	r24, Z
    191a:	85 fd       	sbrc	r24, 5
    191c:	05 c0       	rjmp	.+10     	; 0x1928 <_ZN14HardwareSerial5flushEv+0x20>
    191e:	a8 89       	ldd	r26, Y+16	; 0x10
    1920:	b9 89       	ldd	r27, Y+17	; 0x11
    1922:	8c 91       	ld	r24, X
    1924:	86 fd       	sbrc	r24, 6
    1926:	0e c0       	rjmp	.+28     	; 0x1944 <_ZN14HardwareSerial5flushEv+0x3c>
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	07 fc       	sbrc	r0, 7
    192c:	f5 cf       	rjmp	.-22     	; 0x1918 <_ZN14HardwareSerial5flushEv+0x10>
    192e:	80 81       	ld	r24, Z
    1930:	85 ff       	sbrs	r24, 5
    1932:	f2 cf       	rjmp	.-28     	; 0x1918 <_ZN14HardwareSerial5flushEv+0x10>
    1934:	a8 89       	ldd	r26, Y+16	; 0x10
    1936:	b9 89       	ldd	r27, Y+17	; 0x11
    1938:	8c 91       	ld	r24, X
    193a:	85 ff       	sbrs	r24, 5
    193c:	ed cf       	rjmp	.-38     	; 0x1918 <_ZN14HardwareSerial5flushEv+0x10>
    193e:	ce 01       	movw	r24, r28
    1940:	c2 df       	rcall	.-124    	; 0x18c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1942:	e8 cf       	rjmp	.-48     	; 0x1914 <_ZN14HardwareSerial5flushEv+0xc>
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	08 95       	ret

0000194a <_ZN14HardwareSerial5writeEh>:
    194a:	ef 92       	push	r14
    194c:	ff 92       	push	r15
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	ec 01       	movw	r28, r24
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	88 8f       	std	Y+24, r24	; 0x18
    195c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    195e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1960:	98 13       	cpse	r25, r24
    1962:	05 c0       	rjmp	.+10     	; 0x196e <_ZN14HardwareSerial5writeEh+0x24>
    1964:	e8 89       	ldd	r30, Y+16	; 0x10
    1966:	f9 89       	ldd	r31, Y+17	; 0x11
    1968:	80 81       	ld	r24, Z
    196a:	85 fd       	sbrc	r24, 5
    196c:	23 c0       	rjmp	.+70     	; 0x19b4 <_ZN14HardwareSerial5writeEh+0x6a>
    196e:	f6 2e       	mov	r15, r22
    1970:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1972:	10 e0       	ldi	r17, 0x00	; 0
    1974:	0f 5f       	subi	r16, 0xFF	; 255
    1976:	1f 4f       	sbci	r17, 0xFF	; 255
    1978:	0f 73       	andi	r16, 0x3F	; 63
    197a:	11 27       	eor	r17, r17
    197c:	e0 2e       	mov	r14, r16
    197e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1980:	e8 12       	cpse	r14, r24
    1982:	0b c0       	rjmp	.+22     	; 0x199a <_ZN14HardwareSerial5writeEh+0x50>
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	07 fc       	sbrc	r0, 7
    1988:	fa cf       	rjmp	.-12     	; 0x197e <_ZN14HardwareSerial5writeEh+0x34>
    198a:	e8 89       	ldd	r30, Y+16	; 0x10
    198c:	f9 89       	ldd	r31, Y+17	; 0x11
    198e:	80 81       	ld	r24, Z
    1990:	85 ff       	sbrs	r24, 5
    1992:	f5 cf       	rjmp	.-22     	; 0x197e <_ZN14HardwareSerial5writeEh+0x34>
    1994:	ce 01       	movw	r24, r28
    1996:	97 df       	rcall	.-210    	; 0x18c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1998:	f2 cf       	rjmp	.-28     	; 0x197e <_ZN14HardwareSerial5writeEh+0x34>
    199a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    199c:	fe 01       	movw	r30, r28
    199e:	e8 0f       	add	r30, r24
    19a0:	f1 1d       	adc	r31, r1
    19a2:	e3 5a       	subi	r30, 0xA3	; 163
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	f0 82       	st	Z, r15
    19a8:	0b 8f       	std	Y+27, r16	; 0x1b
    19aa:	ea 89       	ldd	r30, Y+18	; 0x12
    19ac:	fb 89       	ldd	r31, Y+19	; 0x13
    19ae:	80 81       	ld	r24, Z
    19b0:	80 62       	ori	r24, 0x20	; 32
    19b2:	07 c0       	rjmp	.+14     	; 0x19c2 <_ZN14HardwareSerial5writeEh+0x78>
    19b4:	ee 89       	ldd	r30, Y+22	; 0x16
    19b6:	ff 89       	ldd	r31, Y+23	; 0x17
    19b8:	60 83       	st	Z, r22
    19ba:	e8 89       	ldd	r30, Y+16	; 0x10
    19bc:	f9 89       	ldd	r31, Y+17	; 0x11
    19be:	80 81       	ld	r24, Z
    19c0:	80 64       	ori	r24, 0x40	; 64
    19c2:	80 83       	st	Z, r24
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	08 95       	ret

000019d6 <_ZN14HardwareSerial5beginEmh>:
    19d6:	cf 92       	push	r12
    19d8:	df 92       	push	r13
    19da:	ef 92       	push	r14
    19dc:	ff 92       	push	r15
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	ec 01       	movw	r28, r24
    19e6:	6a 01       	movw	r12, r20
    19e8:	7b 01       	movw	r14, r22
    19ea:	12 2f       	mov	r17, r18
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	70 e4       	ldi	r23, 0x40	; 64
    19f0:	88 e3       	ldi	r24, 0x38	; 56
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	a7 01       	movw	r20, r14
    19f6:	96 01       	movw	r18, r12
    19f8:	8f d1       	rcall	.+798    	; 0x1d18 <__udivmodsi4>
    19fa:	da 01       	movw	r26, r20
    19fc:	c9 01       	movw	r24, r18
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	a1 09       	sbc	r26, r1
    1a02:	b1 09       	sbc	r27, r1
    1a04:	b6 95       	lsr	r27
    1a06:	a7 95       	ror	r26
    1a08:	97 95       	ror	r25
    1a0a:	87 95       	ror	r24
    1a0c:	ac 01       	movw	r20, r24
    1a0e:	e8 89       	ldd	r30, Y+16	; 0x10
    1a10:	f9 89       	ldd	r31, Y+17	; 0x11
    1a12:	82 e0       	ldi	r24, 0x02	; 2
    1a14:	80 83       	st	Z, r24
    1a16:	41 15       	cp	r20, r1
    1a18:	80 e1       	ldi	r24, 0x10	; 16
    1a1a:	58 07       	cpc	r21, r24
    1a1c:	a0 f0       	brcs	.+40     	; 0x1a46 <_ZN14HardwareSerial5beginEmh+0x70>
    1a1e:	e8 89       	ldd	r30, Y+16	; 0x10
    1a20:	f9 89       	ldd	r31, Y+17	; 0x11
    1a22:	10 82       	st	Z, r1
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	70 e2       	ldi	r23, 0x20	; 32
    1a28:	8c e1       	ldi	r24, 0x1C	; 28
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	a7 01       	movw	r20, r14
    1a2e:	96 01       	movw	r18, r12
    1a30:	73 d1       	rcall	.+742    	; 0x1d18 <__udivmodsi4>
    1a32:	ba 01       	movw	r22, r20
    1a34:	a9 01       	movw	r20, r18
    1a36:	41 50       	subi	r20, 0x01	; 1
    1a38:	51 09       	sbc	r21, r1
    1a3a:	61 09       	sbc	r22, r1
    1a3c:	71 09       	sbc	r23, r1
    1a3e:	76 95       	lsr	r23
    1a40:	67 95       	ror	r22
    1a42:	57 95       	ror	r21
    1a44:	47 95       	ror	r20
    1a46:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a48:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a4a:	50 83       	st	Z, r21
    1a4c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a4e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a50:	40 83       	st	Z, r20
    1a52:	18 8e       	std	Y+24, r1	; 0x18
    1a54:	ec 89       	ldd	r30, Y+20	; 0x14
    1a56:	fd 89       	ldd	r31, Y+21	; 0x15
    1a58:	10 83       	st	Z, r17
    1a5a:	ea 89       	ldd	r30, Y+18	; 0x12
    1a5c:	fb 89       	ldd	r31, Y+19	; 0x13
    1a5e:	80 81       	ld	r24, Z
    1a60:	80 61       	ori	r24, 0x10	; 16
    1a62:	80 83       	st	Z, r24
    1a64:	ea 89       	ldd	r30, Y+18	; 0x12
    1a66:	fb 89       	ldd	r31, Y+19	; 0x13
    1a68:	80 81       	ld	r24, Z
    1a6a:	88 60       	ori	r24, 0x08	; 8
    1a6c:	80 83       	st	Z, r24
    1a6e:	ea 89       	ldd	r30, Y+18	; 0x12
    1a70:	fb 89       	ldd	r31, Y+19	; 0x13
    1a72:	80 81       	ld	r24, Z
    1a74:	80 68       	ori	r24, 0x80	; 128
    1a76:	80 83       	st	Z, r24
    1a78:	ea 89       	ldd	r30, Y+18	; 0x12
    1a7a:	fb 89       	ldd	r31, Y+19	; 0x13
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8f 7d       	andi	r24, 0xDF	; 223
    1a80:	80 83       	st	Z, r24
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	ff 90       	pop	r15
    1a8a:	ef 90       	pop	r14
    1a8c:	df 90       	pop	r13
    1a8e:	cf 90       	pop	r12
    1a90:	08 95       	ret

00001a92 <__vector_25>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    1a92:	1f 92       	push	r1
    1a94:	0f 92       	push	r0
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	0f 92       	push	r0
    1a9a:	11 24       	eor	r1, r1
    1a9c:	0b b6       	in	r0, 0x3b	; 59
    1a9e:	0f 92       	push	r0
    1aa0:	2f 93       	push	r18
    1aa2:	8f 93       	push	r24
    1aa4:	9f 93       	push	r25
    1aa6:	ef 93       	push	r30
    1aa8:	ff 93       	push	r31
    1aaa:	e0 91 bd 02 	lds	r30, 0x02BD	; 0x8002bd <Serial+0x10>
    1aae:	f0 91 be 02 	lds	r31, 0x02BE	; 0x8002be <Serial+0x11>
    1ab2:	80 81       	ld	r24, Z
    1ab4:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <Serial+0x16>
    1ab8:	f0 91 c4 02 	lds	r31, 0x02C4	; 0x8002c4 <Serial+0x17>
    1abc:	82 fd       	sbrc	r24, 2
    1abe:	12 c0       	rjmp	.+36     	; 0x1ae4 <__vector_25+0x52>
    1ac0:	90 81       	ld	r25, Z
    1ac2:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <Serial+0x19>
    1ac6:	8f 5f       	subi	r24, 0xFF	; 255
    1ac8:	8f 73       	andi	r24, 0x3F	; 63
    1aca:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <Serial+0x1a>
    1ace:	82 17       	cp	r24, r18
    1ad0:	51 f0       	breq	.+20     	; 0x1ae6 <__vector_25+0x54>
    1ad2:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <Serial+0x19>
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	e3 55       	subi	r30, 0x53	; 83
    1ada:	fd 4f       	sbci	r31, 0xFD	; 253
    1adc:	95 8f       	std	Z+29, r25	; 0x1d
    1ade:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <Serial+0x19>
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <__vector_25+0x54>
    1ae4:	80 81       	ld	r24, Z
    1ae6:	ff 91       	pop	r31
    1ae8:	ef 91       	pop	r30
    1aea:	9f 91       	pop	r25
    1aec:	8f 91       	pop	r24
    1aee:	2f 91       	pop	r18
    1af0:	0f 90       	pop	r0
    1af2:	0b be       	out	0x3b, r0	; 59
    1af4:	0f 90       	pop	r0
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	0f 90       	pop	r0
    1afa:	1f 90       	pop	r1
    1afc:	18 95       	reti

00001afe <__vector_26>:
    1afe:	1f 92       	push	r1
    1b00:	0f 92       	push	r0
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	0f 92       	push	r0
    1b06:	11 24       	eor	r1, r1
    1b08:	0b b6       	in	r0, 0x3b	; 59
    1b0a:	0f 92       	push	r0
    1b0c:	2f 93       	push	r18
    1b0e:	3f 93       	push	r19
    1b10:	4f 93       	push	r20
    1b12:	5f 93       	push	r21
    1b14:	6f 93       	push	r22
    1b16:	7f 93       	push	r23
    1b18:	8f 93       	push	r24
    1b1a:	9f 93       	push	r25
    1b1c:	af 93       	push	r26
    1b1e:	bf 93       	push	r27
    1b20:	ef 93       	push	r30
    1b22:	ff 93       	push	r31
    1b24:	8d ea       	ldi	r24, 0xAD	; 173
    1b26:	92 e0       	ldi	r25, 0x02	; 2
    1b28:	ce de       	rcall	.-612    	; 0x18c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b2a:	ff 91       	pop	r31
    1b2c:	ef 91       	pop	r30
    1b2e:	bf 91       	pop	r27
    1b30:	af 91       	pop	r26
    1b32:	9f 91       	pop	r25
    1b34:	8f 91       	pop	r24
    1b36:	7f 91       	pop	r23
    1b38:	6f 91       	pop	r22
    1b3a:	5f 91       	pop	r21
    1b3c:	4f 91       	pop	r20
    1b3e:	3f 91       	pop	r19
    1b40:	2f 91       	pop	r18
    1b42:	0f 90       	pop	r0
    1b44:	0b be       	out	0x3b, r0	; 59
    1b46:	0f 90       	pop	r0
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	0f 90       	pop	r0
    1b4c:	1f 90       	pop	r1
    1b4e:	18 95       	reti

00001b50 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1b50:	ed ea       	ldi	r30, 0xAD	; 173
    1b52:	f2 e0       	ldi	r31, 0x02	; 2
    1b54:	13 82       	std	Z+3, r1	; 0x03
    1b56:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1b58:	88 ee       	ldi	r24, 0xE8	; 232
    1b5a:	93 e0       	ldi	r25, 0x03	; 3
    1b5c:	a0 e0       	ldi	r26, 0x00	; 0
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	84 83       	std	Z+4, r24	; 0x04
    1b62:	95 83       	std	Z+5, r25	; 0x05
    1b64:	a6 83       	std	Z+6, r26	; 0x06
    1b66:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1b68:	8b e1       	ldi	r24, 0x1B	; 27
    1b6a:	92 e0       	ldi	r25, 0x02	; 2
    1b6c:	91 83       	std	Z+1, r25	; 0x01
    1b6e:	80 83       	st	Z, r24
    1b70:	85 ec       	ldi	r24, 0xC5	; 197
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	95 87       	std	Z+13, r25	; 0x0d
    1b76:	84 87       	std	Z+12, r24	; 0x0c
    1b78:	84 ec       	ldi	r24, 0xC4	; 196
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	97 87       	std	Z+15, r25	; 0x0f
    1b7e:	86 87       	std	Z+14, r24	; 0x0e
    1b80:	80 ec       	ldi	r24, 0xC0	; 192
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	91 8b       	std	Z+17, r25	; 0x11
    1b86:	80 8b       	std	Z+16, r24	; 0x10
    1b88:	81 ec       	ldi	r24, 0xC1	; 193
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	93 8b       	std	Z+19, r25	; 0x13
    1b8e:	82 8b       	std	Z+18, r24	; 0x12
    1b90:	82 ec       	ldi	r24, 0xC2	; 194
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	95 8b       	std	Z+21, r25	; 0x15
    1b96:	84 8b       	std	Z+20, r24	; 0x14
    1b98:	86 ec       	ldi	r24, 0xC6	; 198
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	97 8b       	std	Z+23, r25	; 0x17
    1b9e:	86 8b       	std	Z+22, r24	; 0x16
    1ba0:	11 8e       	std	Z+25, r1	; 0x19
    1ba2:	12 8e       	std	Z+26, r1	; 0x1a
    1ba4:	13 8e       	std	Z+27, r1	; 0x1b
    1ba6:	14 8e       	std	Z+28, r1	; 0x1c
    1ba8:	08 95       	ret

00001baa <__vector_36>:
    1baa:	1f 92       	push	r1
    1bac:	0f 92       	push	r0
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	0f 92       	push	r0
    1bb2:	11 24       	eor	r1, r1
    1bb4:	0b b6       	in	r0, 0x3b	; 59
    1bb6:	0f 92       	push	r0
    1bb8:	2f 93       	push	r18
    1bba:	8f 93       	push	r24
    1bbc:	9f 93       	push	r25
    1bbe:	ef 93       	push	r30
    1bc0:	ff 93       	push	r31
    1bc2:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <Serial1+0x10>
    1bc6:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <Serial1+0x11>
    1bca:	80 81       	ld	r24, Z
    1bcc:	e0 91 60 03 	lds	r30, 0x0360	; 0x800360 <Serial1+0x16>
    1bd0:	f0 91 61 03 	lds	r31, 0x0361	; 0x800361 <Serial1+0x17>
    1bd4:	82 fd       	sbrc	r24, 2
    1bd6:	12 c0       	rjmp	.+36     	; 0x1bfc <__vector_36+0x52>
    1bd8:	90 81       	ld	r25, Z
    1bda:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <Serial1+0x19>
    1bde:	8f 5f       	subi	r24, 0xFF	; 255
    1be0:	8f 73       	andi	r24, 0x3F	; 63
    1be2:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <Serial1+0x1a>
    1be6:	82 17       	cp	r24, r18
    1be8:	51 f0       	breq	.+20     	; 0x1bfe <__vector_36+0x54>
    1bea:	e0 91 63 03 	lds	r30, 0x0363	; 0x800363 <Serial1+0x19>
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	e6 5b       	subi	r30, 0xB6	; 182
    1bf2:	fc 4f       	sbci	r31, 0xFC	; 252
    1bf4:	95 8f       	std	Z+29, r25	; 0x1d
    1bf6:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <Serial1+0x19>
    1bfa:	01 c0       	rjmp	.+2      	; 0x1bfe <__vector_36+0x54>
    1bfc:	80 81       	ld	r24, Z
    1bfe:	ff 91       	pop	r31
    1c00:	ef 91       	pop	r30
    1c02:	9f 91       	pop	r25
    1c04:	8f 91       	pop	r24
    1c06:	2f 91       	pop	r18
    1c08:	0f 90       	pop	r0
    1c0a:	0b be       	out	0x3b, r0	; 59
    1c0c:	0f 90       	pop	r0
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	0f 90       	pop	r0
    1c12:	1f 90       	pop	r1
    1c14:	18 95       	reti

00001c16 <__vector_37>:
    1c16:	1f 92       	push	r1
    1c18:	0f 92       	push	r0
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	0f 92       	push	r0
    1c1e:	11 24       	eor	r1, r1
    1c20:	0b b6       	in	r0, 0x3b	; 59
    1c22:	0f 92       	push	r0
    1c24:	2f 93       	push	r18
    1c26:	3f 93       	push	r19
    1c28:	4f 93       	push	r20
    1c2a:	5f 93       	push	r21
    1c2c:	6f 93       	push	r22
    1c2e:	7f 93       	push	r23
    1c30:	8f 93       	push	r24
    1c32:	9f 93       	push	r25
    1c34:	af 93       	push	r26
    1c36:	bf 93       	push	r27
    1c38:	ef 93       	push	r30
    1c3a:	ff 93       	push	r31
    1c3c:	8a e4       	ldi	r24, 0x4A	; 74
    1c3e:	93 e0       	ldi	r25, 0x03	; 3
    1c40:	42 de       	rcall	.-892    	; 0x18c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1c42:	ff 91       	pop	r31
    1c44:	ef 91       	pop	r30
    1c46:	bf 91       	pop	r27
    1c48:	af 91       	pop	r26
    1c4a:	9f 91       	pop	r25
    1c4c:	8f 91       	pop	r24
    1c4e:	7f 91       	pop	r23
    1c50:	6f 91       	pop	r22
    1c52:	5f 91       	pop	r21
    1c54:	4f 91       	pop	r20
    1c56:	3f 91       	pop	r19
    1c58:	2f 91       	pop	r18
    1c5a:	0f 90       	pop	r0
    1c5c:	0b be       	out	0x3b, r0	; 59
    1c5e:	0f 90       	pop	r0
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	0f 90       	pop	r0
    1c64:	1f 90       	pop	r1
    1c66:	18 95       	reti

00001c68 <_GLOBAL__sub_I___vector_36>:
    1c68:	ea e4       	ldi	r30, 0x4A	; 74
    1c6a:	f3 e0       	ldi	r31, 0x03	; 3
    1c6c:	13 82       	std	Z+3, r1	; 0x03
    1c6e:	12 82       	std	Z+2, r1	; 0x02
    1c70:	88 ee       	ldi	r24, 0xE8	; 232
    1c72:	93 e0       	ldi	r25, 0x03	; 3
    1c74:	a0 e0       	ldi	r26, 0x00	; 0
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	84 83       	std	Z+4, r24	; 0x04
    1c7a:	95 83       	std	Z+5, r25	; 0x05
    1c7c:	a6 83       	std	Z+6, r26	; 0x06
    1c7e:	b7 83       	std	Z+7, r27	; 0x07
    1c80:	8b e1       	ldi	r24, 0x1B	; 27
    1c82:	92 e0       	ldi	r25, 0x02	; 2
    1c84:	91 83       	std	Z+1, r25	; 0x01
    1c86:	80 83       	st	Z, r24
    1c88:	8d ec       	ldi	r24, 0xCD	; 205
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	95 87       	std	Z+13, r25	; 0x0d
    1c8e:	84 87       	std	Z+12, r24	; 0x0c
    1c90:	8c ec       	ldi	r24, 0xCC	; 204
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	97 87       	std	Z+15, r25	; 0x0f
    1c96:	86 87       	std	Z+14, r24	; 0x0e
    1c98:	88 ec       	ldi	r24, 0xC8	; 200
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	91 8b       	std	Z+17, r25	; 0x11
    1c9e:	80 8b       	std	Z+16, r24	; 0x10
    1ca0:	89 ec       	ldi	r24, 0xC9	; 201
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	93 8b       	std	Z+19, r25	; 0x13
    1ca6:	82 8b       	std	Z+18, r24	; 0x12
    1ca8:	8a ec       	ldi	r24, 0xCA	; 202
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	95 8b       	std	Z+21, r25	; 0x15
    1cae:	84 8b       	std	Z+20, r24	; 0x14
    1cb0:	8e ec       	ldi	r24, 0xCE	; 206
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	97 8b       	std	Z+23, r25	; 0x17
    1cb6:	86 8b       	std	Z+22, r24	; 0x16
    1cb8:	11 8e       	std	Z+25, r1	; 0x19
    1cba:	12 8e       	std	Z+26, r1	; 0x1a
    1cbc:	13 8e       	std	Z+27, r1	; 0x1b
    1cbe:	14 8e       	std	Z+28, r1	; 0x1c
    1cc0:	08 95       	ret

00001cc2 <_ZN5Print5writeEPKhj>:
    1cc2:	cf 92       	push	r12
    1cc4:	df 92       	push	r13
    1cc6:	ef 92       	push	r14
    1cc8:	ff 92       	push	r15
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
    1cce:	cf 93       	push	r28
    1cd0:	df 93       	push	r29
    1cd2:	6c 01       	movw	r12, r24
    1cd4:	7a 01       	movw	r14, r20
    1cd6:	8b 01       	movw	r16, r22
    1cd8:	c0 e0       	ldi	r28, 0x00	; 0
    1cda:	d0 e0       	ldi	r29, 0x00	; 0
    1cdc:	ce 15       	cp	r28, r14
    1cde:	df 05       	cpc	r29, r15
    1ce0:	89 f0       	breq	.+34     	; 0x1d04 <_ZN5Print5writeEPKhj+0x42>
    1ce2:	d8 01       	movw	r26, r16
    1ce4:	6d 91       	ld	r22, X+
    1ce6:	8d 01       	movw	r16, r26
    1ce8:	d6 01       	movw	r26, r12
    1cea:	ed 91       	ld	r30, X+
    1cec:	fc 91       	ld	r31, X
    1cee:	01 90       	ld	r0, Z+
    1cf0:	f0 81       	ld	r31, Z
    1cf2:	e0 2d       	mov	r30, r0
    1cf4:	c6 01       	movw	r24, r12
    1cf6:	19 95       	eicall
    1cf8:	89 2b       	or	r24, r25
    1cfa:	11 f4       	brne	.+4      	; 0x1d00 <_ZN5Print5writeEPKhj+0x3e>
    1cfc:	7e 01       	movw	r14, r28
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <_ZN5Print5writeEPKhj+0x42>
    1d00:	21 96       	adiw	r28, 0x01	; 1
    1d02:	ec cf       	rjmp	.-40     	; 0x1cdc <_ZN5Print5writeEPKhj+0x1a>
    1d04:	c7 01       	movw	r24, r14
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	df 90       	pop	r13
    1d14:	cf 90       	pop	r12
    1d16:	08 95       	ret

00001d18 <__udivmodsi4>:
    1d18:	a1 e2       	ldi	r26, 0x21	; 33
    1d1a:	1a 2e       	mov	r1, r26
    1d1c:	aa 1b       	sub	r26, r26
    1d1e:	bb 1b       	sub	r27, r27
    1d20:	fd 01       	movw	r30, r26
    1d22:	0d c0       	rjmp	.+26     	; 0x1d3e <__udivmodsi4_ep>

00001d24 <__udivmodsi4_loop>:
    1d24:	aa 1f       	adc	r26, r26
    1d26:	bb 1f       	adc	r27, r27
    1d28:	ee 1f       	adc	r30, r30
    1d2a:	ff 1f       	adc	r31, r31
    1d2c:	a2 17       	cp	r26, r18
    1d2e:	b3 07       	cpc	r27, r19
    1d30:	e4 07       	cpc	r30, r20
    1d32:	f5 07       	cpc	r31, r21
    1d34:	20 f0       	brcs	.+8      	; 0x1d3e <__udivmodsi4_ep>
    1d36:	a2 1b       	sub	r26, r18
    1d38:	b3 0b       	sbc	r27, r19
    1d3a:	e4 0b       	sbc	r30, r20
    1d3c:	f5 0b       	sbc	r31, r21

00001d3e <__udivmodsi4_ep>:
    1d3e:	66 1f       	adc	r22, r22
    1d40:	77 1f       	adc	r23, r23
    1d42:	88 1f       	adc	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	1a 94       	dec	r1
    1d48:	69 f7       	brne	.-38     	; 0x1d24 <__udivmodsi4_loop>
    1d4a:	60 95       	com	r22
    1d4c:	70 95       	com	r23
    1d4e:	80 95       	com	r24
    1d50:	90 95       	com	r25
    1d52:	9b 01       	movw	r18, r22
    1d54:	ac 01       	movw	r20, r24
    1d56:	bd 01       	movw	r22, r26
    1d58:	cf 01       	movw	r24, r30
    1d5a:	08 95       	ret

00001d5c <__tablejump2__>:
    1d5c:	ee 0f       	add	r30, r30
    1d5e:	ff 1f       	adc	r31, r31
    1d60:	88 1f       	adc	r24, r24
    1d62:	8b bf       	out	0x3b, r24	; 59
    1d64:	07 90       	elpm	r0, Z+
    1d66:	f6 91       	elpm	r31, Z
    1d68:	e0 2d       	mov	r30, r0
    1d6a:	19 94       	eijmp

00001d6c <_exit>:
    1d6c:	f8 94       	cli

00001d6e <__stop_program>:
    1d6e:	ff cf       	rjmp	.-2      	; 0x1d6e <__stop_program>
